[{"path":"https://grvanderploeg.github.io/parafac4microbiome/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 parafac4microbiome authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/AP.html","id":"preamble","dir":"Articles","previous_headings":"","what":"Preamble","title":"AP","text":"","code":"library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union library(tidyr) library(parafac4microbiome) library(NPLStoolbox) library(CMTFtoolbox) ##  ## Attaching package: 'CMTFtoolbox' ## The following object is masked from 'package:NPLStoolbox': ##  ##     npred ## The following objects are masked from 'package:parafac4microbiome': ##  ##     fac_to_vect, reinflateFac, reinflateTensor, vect_to_fac library(ggplot2) library(ggpubr) testMetadata = function(model, comp, metadata){    transformedSubjectLoadings = model$Fac[[1]][,comp]   transformedSubjectLoadings = transformedSubjectLoadings / norm(transformedSubjectLoadings, \"2\")      metadata = metadata$mode1 %>% left_join(ageInfo, by=\"SubjectID\") %>% mutate(Gender=as.numeric(as.factor(Gender), PainS_NopainA=as.numeric(as.factor(PainS_NopainA))))   result = lm(transformedSubjectLoadings ~ Gender + Age + PainS_NopainA, data=metadata)      # Extract coefficients and confidence intervals   coef_estimates <- summary(result)$coefficients   conf_intervals <- confint(result)      # Remove intercept   coef_estimates <- coef_estimates[rownames(coef_estimates) != \"(Intercept)\", ]   conf_intervals <- conf_intervals[rownames(conf_intervals) != \"(Intercept)\", ]      # Combine into a clean data frame   summary_table <- data.frame(     Term     = rownames(coef_estimates),     Estimate = coef_estimates[, \"Estimate\"] * 1e3,     CI       = paste0(                  conf_intervals[, 1], \" – \",                  conf_intervals[, 2]                ),     P_value  = coef_estimates[, \"Pr(>|t|)\"],     P_adjust = p.adjust(coef_estimates[, \"Pr(>|t|)\"], \"BH\"),     row.names = NULL   )      return(summary_table) } cytokines_meta_data = read.csv(\"./AP/input_deduplicated_metadata_RvdP.csv\", sep=\" \", header=FALSE) %>% as_tibble() colnames(cytokines_meta_data) = c(\"SubjectID\", \"Visit\", \"Gender\", \"Age\", \"Pain_noPain\", \"case_control\") ageInfo = cytokines_meta_data %>% select(SubjectID, Age) %>% unique() # Full cohort processedCytokines_full = CMTFtoolbox::Georgiou2025$Inflammatory_mediators processedCytokines_full$data = log(processedCytokines_full$data + 0.005)  # Remove outlier subjects: A11-8 processedCytokines_full$data = processedCytokines_full$data[-25,,] processedCytokines_full$mode1 = processedCytokines_full$mode1[-25,]  processedCytokines_full$data = multiwayCenter(processedCytokines_full$data, 1) processedCytokines_full$data = multiwayScale(processedCytokines_full$data, 2)  # Control only subcohort processedCytokines_control = CMTFtoolbox::Georgiou2025$Inflammatory_mediators  mask = processedCytokines_control$mode1$case_control == \"control\" processedCytokines_control$data = processedCytokines_control$data[mask,,] processedCytokines_control$mode1 = processedCytokines_control$mode1[mask,]  processedCytokines_control$data = log(processedCytokines_control$data + 0.005) processedCytokines_control$data = multiwayCenter(processedCytokines_control$data, 1) processedCytokines_control$data = multiwayScale(processedCytokines_control$data, 2)  # Case only subcohort processedCytokines_case = CMTFtoolbox::Georgiou2025$Inflammatory_mediators  mask = processedCytokines_case$mode1$case_control == \"case\" processedCytokines_case$data = processedCytokines_case$data[mask,,] processedCytokines_case$mode1 = processedCytokines_case$mode1[mask,]  # Also remove subject A11-8 due to being an outlier processedCytokines_case$data = processedCytokines_case$data[-25,,] processedCytokines_case$mode1 = processedCytokines_case$mode1[-25,]  processedCytokines_case$data = log(processedCytokines_case$data + 0.005) processedCytokines_case$data = multiwayCenter(processedCytokines_case$data, 1) processedCytokines_case$data = multiwayScale(processedCytokines_case$data, 2) # assessment_cytokines_full = parafac4microbiome::assessModelQuality(processedCytokines_full$data, numRepetitions=10, numCores=10) # assessment_cytokines_full$plots$overview # def 2 # # assessment_cytokines_control = parafac4microbiome::assessModelQuality(processedCytokines_control$data, numRepetitions=10, numCores=10) # assessment_cytokines_control$plots$overview # def 1 # # assessment_cytokines_case = parafac4microbiome::assessModelQuality(processedCytokines_case$data, numRepetitions=10, numCores=10) # assessment_cytokines_case$plots$overview # 2-4 # # saveRDS(assessment_cytokines_full, \"./CP_assessment_cytokines_full.RDS\") # saveRDS(assessment_cytokines_control, \"./CP_assessment_cytokines_control.RDS\") # saveRDS(assessment_cytokines_case, \"./CP_assessment_cytokines_case.RDS\") #  # assessment_cytokines_full = readRDS(\"./CP_assessment_cytokines_full.RDS\") # assessment_cytokines_full$plots$overview #  # assessment_cytokines_control = readRDS(\"./CP_assessment_cytokines_control.RDS\") # assessment_cytokines_control$plots$overview #  # assessment_cytokines_case = readRDS(\"./CP_assessment_cytokines_case.RDS\") # assessment_cytokines_case$plots$overview #  # a = assessment_cytokines_full$metrics$CORCONDIA %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% pivot_longer(-index) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + xlab(\"Number of components\") + ylab(\"CORCONDIA\") + theme(text=element_text(size=16)) #  # b = assessment_cytokines_control$metrics$CORCONDIA %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% pivot_longer(-index) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + xlab(\"Number of components\") + ylab(\"CORCONDIA\") + theme(text=element_text(size=16)) #  # c = assessment_cytokines_case$metrics$CORCONDIA %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% pivot_longer(-index) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + xlab(\"Number of components\") + ylab(\"CORCONDIA\") + theme(text=element_text(size=16)) #  # ggarrange(a,b,c, nrow=1, ncol=3) # colourCols = c(\"\", \"\", \"\") # legendTitles = c(\"\", \"\", \"\") # xLabels = c(\"Subject index\", \"Feature index\", \"Time index\") # legendColNums = c(2,5,0) # arrangeModes = c(FALSE, FALSE, FALSE) # continuousModes = c(FALSE,FALSE,TRUE) #  # stability_cytokines = parafac4microbiome::assessModelStability(processedCytokines_case, maxNumComponents=5, numFolds=10, colourCols=colourCols, legendTitles=legendTitles, xLabels = xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, numCores=parallel::detectCores()) # stability_cytokines$modelPlots[[2]] # stability_cytokines$modelPlots[[3]] # stability_cytokines$modelPlots[[4]] # stability_cytokines$modelPlots[[5]] # cp_cytokines_full = parafac4microbiome::parafac(processedCytokines_full$data, nfac=2, nstart=100) # cp_cytokines_control = parafac4microbiome::parafac(processedCytokines_control$data, nfac=1, nstart=100) # cp_cytokines_case = parafac4microbiome::parafac(processedCytokines_case$data, nfac=3, nstart=100) #  # saveRDS(cp_cytokines_full, \"./cp_cytokines_full.RDS\") # saveRDS(cp_cytokines_control, \"./cp_cytokines_control.RDS\") # saveRDS(cp_cytokines_case, \"./cp_cytokines_case.RDS\")  cp_cytokines_full = readRDS(\"./AP/cp_cytokines_full.RDS\") cp_cytokines_control = readRDS(\"./AP/cp_cytokines_control.RDS\") cp_cytokines_case = readRDS(\"./AP/cp_cytokines_case.RDS\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/AP.html","id":"inflammatory-mediators","dir":"Articles","previous_headings":"","what":"Inflammatory mediators","title":"AP","text":"","code":"testMetadata(cp_cytokines_case, 1, processedCytokines_case) ##             Term   Estimate                                         CI ## 1         Gender 164.949044     0.0072276098315647 – 0.322670478266166 ## 2            Age  -1.993531 -0.00749714837460696 – 0.00351008731927873 ## 3 PainS_NopainAS  90.764635    -0.0677608834293364 – 0.249290152970497 ##      P_value  P_adjust ## 1 0.04120853 0.1236256 ## 2 0.45964329 0.4596433 ## 3 0.24705950 0.3705893 testMetadata(cp_cytokines_case, 2, processedCytokines_case) ##             Term   Estimate                                        CI   P_value ## 1         Gender -10.645881    -0.188082738359188 – 0.166790975410106 0.9018900 ## 2            Age  -3.055744 -0.00924732264771653 – 0.0031358344938848 0.3164014 ## 3 PainS_NopainAS  31.654457    -0.146686995485999 – 0.209995909725848 0.7157353 ##   P_adjust ## 1  0.90189 ## 2  0.90189 ## 3  0.90189 testMetadata(cp_cytokines_case, 3, processedCytokines_case) ##             Term    Estimate                                         CI ## 1         Gender   97.432563    -0.0307466851714757 – 0.225611811849372 ## 2            Age   -8.817799 -0.0132905554470071 – -0.00434504207134558 ## 3 PainS_NopainAS -141.890668   -0.270723390978273 – -0.0130579456514781 ##        P_value    P_adjust ## 1 0.1288756411 0.128875641 ## 2 0.0005117721 0.001535316 ## 3 0.0324479469 0.048671920 # Check sign topIndices = processedCytokines_case$mode2 %>% mutate(index=1:nrow(.), Comp = cp_cytokines_case$Fac[[2]][,1]) %>% arrange(desc(Comp)) %>% head() %>% select(index) %>% pull() bottomIndices = processedCytokines_case$mode2 %>% mutate(index=1:nrow(.), Comp = cp_cytokines_case$Fac[[2]][,1]) %>% arrange(desc(Comp)) %>% tail() %>% select(index) %>% pull()  Xhat = parafac4microbiome::reinflateTensor(cp_cytokines_case$Fac[[1]][,1], cp_cytokines_case$Fac[[2]][,1], cp_cytokines_case$Fac[[3]][,1])  print(\"Positive loadings:\") ## [1] \"Positive loadings:\" print(cor(Xhat[,topIndices[1],2], as.numeric(as.factor(processedCytokines_case$mode1$Gender)), use=\"pairwise.complete.obs\")) # flip ## [1] -0.4193432 print(\"Negative loadings:\") ## [1] \"Negative loadings:\" print(cor(Xhat[,bottomIndices[5],2], as.numeric(as.factor(processedCytokines_case$mode1$Gender)), use=\"pairwise.complete.obs\")) ## [1] 0.4193432 # Plot a = processedCytokines_case$mode1 %>%   mutate(Comp1 = cp_cytokines_case$Fac[[1]][,1]) %>%   ggplot(aes(x=as.factor(Gender),y=Comp1)) +   geom_boxplot() +   geom_jitter(height=0, width=0.05) +   stat_compare_means(comparisons=list(c(\"F\", \"M\")),label=\"p.signif\") +   xlab(\"\") +   ylab(\"Loading\") +   scale_x_discrete(labels=c(\"Female\", \"Male\")) +   theme(text=element_text(size=16))  temp = processedCytokines_case$mode2 %>%   as_tibble() %>%   mutate(Component_1 = -1*cp_cytokines_case$Fac[[2]][,1]) %>%   arrange(Component_1) %>%   mutate(index=1:nrow(.))  b=temp %>%   ggplot(aes(x=as.factor(index),y=Component_1)) +   geom_bar(stat=\"identity\",col=\"black\") +   scale_x_discrete(label=temp$name) +   xlab(\"\") +   ylab(\"Loading\") +   scale_x_discrete(labels=c(\"IL-10\", \"OPG\", \"VEGF\", \"CRP\", expression(IFN-gamma), \"IL-6\", expression(TNF-alpha), \"GM-CSF\", \"IL-17A\", \"IL-8\", \"IL-12p70\", expression(IL-1*alpha), expression(IL-1*beta), expression(MIP-1*alpha), \"IL-4\", \"RANKL\")) +   theme(text=element_text(size=16),axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) ## Scale for x is already present. ## Adding another scale for x, which will replace the existing scale. c = cp_cytokines_case$Fac[[3]][,1] %>% as_tibble() %>% mutate(value=-1*value) %>% mutate(timepoint=c(-6,-3,0,1,6,13)) %>% ggplot(aes(x=timepoint,y=value)) + geom_line() + geom_point() + xlab(\"Time point [weeks]\") + ylab(\"Loading\") + ylim(0,1) + theme(text=element_text(size=16))  a b c # Check sign topIndices = processedCytokines_case$mode2 %>% mutate(index=1:nrow(.), Comp = cp_cytokines_case$Fac[[2]][,3]) %>% arrange(desc(Comp)) %>% head() %>% select(index) %>% pull() bottomIndices = processedCytokines_case$mode2 %>% mutate(index=1:nrow(.), Comp = cp_cytokines_case$Fac[[2]][,3]) %>% arrange(desc(Comp)) %>% tail() %>% select(index) %>% pull()  Xhat = parafac4microbiome::reinflateTensor(cp_cytokines_case$Fac[[1]][,3], cp_cytokines_case$Fac[[2]][,3], cp_cytokines_case$Fac[[3]][,3])  print(\"Positive loadings:\") ## [1] \"Positive loadings:\" print(cor(Xhat[,topIndices[1],2], processedCytokines_case$mode1 %>% left_join(ageInfo) %>% select(Age), use=\"pairwise.complete.obs\")) # no flip ## Joining with `by = join_by(SubjectID)` ##            Age ## [1,] 0.5797891 print(\"Negative loadings:\") ## [1] \"Negative loadings:\" print(cor(Xhat[,bottomIndices[5],2], processedCytokines_case$mode1 %>% left_join(ageInfo) %>% select(Age), use=\"pairwise.complete.obs\")) ## Joining with `by = join_by(SubjectID)` ##             Age ## [1,] -0.5797891 # Plot a = processedCytokines_case$mode1 %>%   left_join(ageInfo) %>%   mutate(Comp1 = cp_cytokines_case$Fac[[1]][,3]) %>%   ggplot(aes(x=Age,y=Comp1)) +   geom_point() +   stat_cor() +   xlab(\"Age\") +   ylab(\"Loading\") +   theme(text=element_text(size=16)) ## Joining with `by = join_by(SubjectID)` temp = processedCytokines_case$mode2 %>%   as_tibble() %>%   mutate(Component_1 = cp_cytokines_case$Fac[[2]][,3]) %>%   arrange(Component_1) %>%   mutate(index=1:nrow(.))  b=temp %>%   ggplot(aes(x=as.factor(index),y=Component_1)) +   geom_bar(stat=\"identity\",col=\"black\") +   scale_x_discrete(label=temp$name) +   xlab(\"\") +   ylab(\"Loading\") +   scale_x_discrete(labels=c(\"IL-10\", \"IL-17A\", \"GM-CSF\", \"IL-12p70\", expression(IFN-gamma), expression(IL-1*alpha), \"RANKL\", expression(IL-1*beta), \"CRP\", \"OPG\", expression(MIP-1*alpha), \"IL-6\", expression(TNF-alpha), \"VEGF\", \"IL-8\")) +   theme(text=element_text(size=16),axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) ## Scale for x is already present. ## Adding another scale for x, which will replace the existing scale. c = cp_cytokines_case$Fac[[3]][,3] %>% as_tibble() %>% mutate(value=-1*value) %>% mutate(timepoint=c(-6,-3,0,1,6,13)) %>% ggplot(aes(x=timepoint,y=value)) + geom_line() + geom_point() + xlab(\"Time point [weeks]\") + ylab(\"Loading\") + ylim(0,1) + theme(text=element_text(size=16))  a b c"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Fujita2023.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Fujita2023","text":"vignette PARAFAC model created Fujita2023 data. done first processing count data. Subsequently, appropriate number components determined. PARAFAC model created visualized.","code":"library(parafac4microbiome) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(ggpubr)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Fujita2023.html","id":"processing-the-data-cube","dir":"Articles","previous_headings":"","what":"Processing the data cube","title":"Fujita2023","text":"data cube Fujita2023$data contains unprocessed counts. function processDataCube() performs processing counts following steps: performs feature selection based sparsityThreshold setting. Sparsity defined fraction samples microbial abundance (ASV/OTU otherwise) zero. performs centered log-ratio transformation sample using compositions::clr() function pseudo-count one (features, prior selection based sparsity). centers scales three-way array. complex subject, refer paper Rasmus Bro Age Smilde. centering across subject mode, make subjects comparable within time point. Scaling within feature mode avoids PARAFAC model focusing features abnormally high variation. outcome processing new version dataset called processedFujita. Please refer documentation processDataCube() information.","code":"processedFujita = processDataCube(Fujita2023, sparsityThreshold=0.99, CLR=TRUE, centerMode=1, scaleMode=2)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Fujita2023.html","id":"determining-the-correct-number-of-components","dir":"Articles","previous_headings":"","what":"Determining the correct number of components","title":"Fujita2023","text":"critical aspect PARAFAC modelling determine correct number components. developed functions assessModelQuality() assessModelStability() purpose. First, assess model quality specify minimum maximum number components investigate number randomly initialized models attempt number components. Note: vignette reflects minimum working example analyzing dataset due computational limitations automatic vignette rendering. Hence, look 1-3 components 5 random initializations . settings ideal real datasets. Please refer documentation assessModelQuality() information. overview plot showcases number iterations, sum--squared error, CORCONDIA variance explained 1-3 components. overview plots show can reach ~40% explained variation take 3 components. CORCONDIA models ~98, well minimum requirement 60. Based overview, either 2 3 components seems fine.","code":"# Setup minNumComponents = 1 maxNumComponents = 3 numRepetitions = 3 # number of randomly initialized models numFolds = 4 # number of jack-knifed models ctol = 1e-5 maxit = 200 numCores= 1  # Plot settings colourCols = c(\"\", \"Genus\", \"\") legendTitles = c(\"\", \"Genus\", \"\") xLabels = c(\"Replicate\", \"Feature index\", \"Time point\") legendColNums = c(0,5,0) arrangeModes = c(FALSE, TRUE, FALSE) continuousModes = c(FALSE,FALSE,TRUE)  # Assess the metrics to determine the correct number of components qualityAssessment = assessModelQuality(processedFujita$data, minNumComponents, maxNumComponents, numRepetitions, ctol=ctol, maxit=maxit, numCores=numCores) qualityAssessment$plots$overview"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Fujita2023.html","id":"jack-knifed-models","dir":"Articles","previous_headings":"","what":"Jack-knifed models","title":"Fujita2023","text":"Next, investigate stability models jack-knifing samples using assessModelStability(). give us information choose 2 3 components.   three-component model stable can safely chosen final model.","code":"stabilityAssessment = assessModelStability(processedFujita, minNumComponents=1, maxNumComponents=3, numFolds=numFolds, considerGroups=FALSE,                                            groupVariable=\"\", colourCols, legendTitles, xLabels, legendColNums, arrangeModes,                                            ctol=ctol, maxit=maxit, numCores=numCores) stabilityAssessment$modelPlots[[1]] stabilityAssessment$modelPlots[[2]] stabilityAssessment$modelPlots[[3]]"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Fujita2023.html","id":"model-selection","dir":"Articles","previous_headings":"","what":"Model selection","title":"Fujita2023","text":"Since three-component model appropriate Fujita2023 dataset, can now select one random initializations assessModelQuality() output final model. selected model corresponds one explained largest amount variation. Finally, visualize model using plotPARAFACmodel().  observe loadings modes components negative. due sign flipping: two modes negative loadings cancel describe thing two positive loadings. flipLoadings() function automatically performs procedure also sorts components much variation describe.","code":"numComponents = 3 modelChoice = which(qualityAssessment$metrics$varExp[,numComponents] == max(qualityAssessment$metrics$varExp[,numComponents])) finalModel = qualityAssessment$models[[numComponents]][[modelChoice]] plotPARAFACmodel(finalModel$Fac, processedFujita, 3, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,   continuousModes = c(FALSE,FALSE,TRUE),   overallTitle = \"Fujita PARAFAC model\") finalModel = flipLoadings(finalModel, processedFujita$data)  plotPARAFACmodel(finalModel$Fac, processedFujita, 3, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,   continuousModes = c(FALSE,FALSE,TRUE),   overallTitle = \"Fujita PARAFAC model\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/GOHTRANS.html","id":"preamble","dir":"Articles","previous_headings":"","what":"Preamble","title":"GOHTRANS","text":"","code":"library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union library(tidyr) library(parafac4microbiome) library(NPLStoolbox) library(CMTFtoolbox) ##  ## Attaching package: 'CMTFtoolbox' ## The following object is masked from 'package:NPLStoolbox': ##  ##     npred ## The following objects are masked from 'package:parafac4microbiome': ##  ##     fac_to_vect, reinflateFac, reinflateTensor, vect_to_fac library(ggplot2) library(ggpubr) library(readr) ph_BOMP = read_delim(\"./GOHTRANS/GOH-TRANS_export_20240205.csv\",                      delim = \";\", escape_double = FALSE, trim_ws = TRUE) %>% as_tibble() ## Rows: 42 Columns: 347 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \";\" ## chr (104): Participant Status, Site Abbreviation, Participant Creation Date,... ## dbl (243): Participant Id, pat_genderID, Age, Informed_consent#Yes, Informed... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. df1 = ph_BOMP %>% select(`Participant Id`, starts_with(\"5.\")) %>% mutate(subject = 1:42, numTeeth = `5.1|Number of teeth`, DMFT = `5.2|DMFT`, numBleedingSites = `5.3|Bleeding sites`, boppercent = `5.4|BOP%`, DPSI = `5.5|DPSI`, pH = `5.8|pH`) %>% select(subject, numTeeth, DMFT, numBleedingSites, boppercent, DPSI, pH) df2 = ph_BOMP %>% select(`Participant Id`, starts_with(\"12.\")) %>% mutate(subject = 1:42, numTeeth = `12.1|Number of teeth`, DMFT = `12.2|DMFT`, numBleedingSites = `12.3|Bleeding sites`, boppercent = `12.4|BOP%`, DPSI = `12.5|DPSI`, pH = `12.8|pH`) %>% select(subject, numTeeth, DMFT, numBleedingSites, boppercent, DPSI, pH) df3 = ph_BOMP %>% select(`Participant Id`, starts_with(\"19.\")) %>% mutate(subject = 1:42, numTeeth = `19.1|Number of teeth`, DMFT = `19.2|DMFT`, numBleedingSites = `19.3|Bleeding sites`, boppercent = `19.4|BOP%`, DPSI = `19.5|DPSI`, pH = `19.8|pH`) %>% select(subject, numTeeth, DMFT, numBleedingSites, boppercent, DPSI, pH) df4 = ph_BOMP %>% select(`Participant Id`, starts_with(\"26.\")) %>% mutate(subject = 1:42, numTeeth = `26.1|Number of teeth`, DMFT = `26.2|DMFT`, numBleedingSites = `26.3|Bleeding sites`, boppercent = `26.4|BOP%`, DPSI = `26.5|DPSI`, pH = `26.8|pH`) %>% select(subject, numTeeth, DMFT, numBleedingSites, boppercent, DPSI, pH)  otherMeta = rbind(df1, df2, df3, df4) %>% as_tibble() %>% mutate(newTimepoint = rep(c(0,3,6,12), each=42)) otherMeta = otherMeta %>% select(subject, newTimepoint, boppercent) otherMeta[otherMeta$boppercent < 0 & !is.na(otherMeta$boppercent), \"boppercent\"] = NA  saliva_sampleMeta = read.csv(\"./GOHTRANS/sampleInfo_fixed.csv\", sep=\" \") %>% as_tibble() %>% select(subject, GenderID, Age, newTimepoint)  # CODS XI df = read.csv(\"./GOHTRANS/CODS_XI.csv\") df = df[1:40,1:10] %>% as_tibble() %>% filter(Participant_code %in% saliva_sampleMeta$subject)  CODS = df %>% select(Participant_code, CODS_BASELINE, CODS_3_MONTHS, CODS_6_MONTHS, CODS_12_MONTHS) %>% pivot_longer(-Participant_code) %>% mutate(timepoint = NA) CODS[CODS$name == \"CODS_BASELINE\", \"timepoint\"] = 0 CODS[CODS$name == \"CODS_3_MONTHS\", \"timepoint\"] = 3 CODS[CODS$name == \"CODS_6_MONTHS\", \"timepoint\"] = 6 CODS[CODS$name == \"CODS_12_MONTHS\", \"timepoint\"] = 12 CODS[CODS$value == -99, \"value\"] = NA CODS = CODS %>% mutate(subject = Participant_code, newTimepoint = timepoint, CODS = value) %>% select(-Participant_code, -name, -value, -timepoint)  XI = df %>% select(Participant_code, XI_BASELINE, XI_3_MONTHS, XI_6_MONTHS, XI_12_MONTHS) %>% pivot_longer(-Participant_code) %>% mutate(timepoint = NA) XI[XI$name == \"XI_BASELINE\", \"timepoint\"] = 0 XI[XI$name == \"XI_3_MONTHS\", \"timepoint\"] = 3 XI[XI$name == \"XI_6_MONTHS\", \"timepoint\"] = 6 XI[XI$name == \"XI_12_MONTHS\", \"timepoint\"] = 12 XI[XI$value == -99, \"value\"] = NA XI = XI %>% mutate(subject = Participant_code, newTimepoint = timepoint, XI = value) %>% select(-Participant_code, -name, -value, -timepoint)  df = otherMeta %>% left_join(CODS) %>% left_join(XI) %>% select(subject, newTimepoint, boppercent, CODS, XI) %>% filter(newTimepoint != \"NA\") ## Joining with `by = join_by(subject, newTimepoint)` ## Joining with `by = join_by(subject, newTimepoint)` meta = df %>% left_join(otherMeta) %>% left_join(saliva_sampleMeta) %>% unique() ## Joining with `by = join_by(subject, newTimepoint, boppercent)` ## Joining with `by = join_by(subject, newTimepoint)` meta[meta < 0] <- NA meta$GenderID = as.numeric(as.factor(meta$GenderID)) - 1  staticMeta = meta %>% filter(newTimepoint == 0) %>% select(subject, GenderID, Age) dynamicMeta = meta %>% select(-GenderID, -Age) #  # newBOP = residuals(lm(boppercent ~ GenderID + Age + CODS + XI, data=meta, na.action=na.exclude)) # newCODS= residuals(lm(CODS ~ boppercent + GenderID + Age + XI, data=meta, na.action=na.exclude)) # newXI = residuals(lm(XI ~ boppercent + GenderID + Age + CODS, data=meta, na.action=na.exclude)) #  # meta = meta %>% mutate(boppercent = newBOP, CODS = newCODS, XI = newXI) clinical_metadata = NPLStoolbox::Cornejo2025$Clinical_measurements$mode1 %>% mutate(BOP = NPLStoolbox::Cornejo2025$Clinical_measurements$data[,1,2], CODS = NPLStoolbox::Cornejo2025$Clinical_measurements$data[,2,2], XI = NPLStoolbox::Cornejo2025$Clinical_measurements$data[,3,2]) %>% left_join(NPLStoolbox::Cornejo2025$Subject_metadata %>% mutate(subject = as.character(subject))) ## Joining with `by = join_by(subject, GenderID)` testMetadata = function(model, comp, metadata){   transformedSubjectLoadings = model$Fac[[1]][,comp]   transformedSubjectLoadings = transformedSubjectLoadings / norm(transformedSubjectLoadings, \"2\")      metadata = metadata$mode1 %>% left_join(clinical_metadata) %>% mutate(GenderID = as.numeric(as.factor(GenderID))-1)      result = lm(transformedSubjectLoadings ~ GenderID + Age + BOP + CODS + XI, data=metadata)      # Extract coefficients and confidence intervals   coef_estimates <- summary(result)$coefficients   conf_intervals <- confint(result)      # Remove intercept   coef_estimates <- coef_estimates[rownames(coef_estimates) != \"(Intercept)\", ]   conf_intervals <- conf_intervals[rownames(conf_intervals) != \"(Intercept)\", ]      # Combine into a clean data frame   summary_table <- data.frame(     Term     = rownames(coef_estimates),     Estimate = coef_estimates[, \"Estimate\"] * 1e3,     CI       = paste0(                  conf_intervals[, 1], \" – \",                  conf_intervals[, 2]                ),     P_value  = coef_estimates[, \"Pr(>|t|)\"],     P_adjust = p.adjust(coef_estimates[, \"Pr(>|t|)\"], \"BH\"),     row.names = NULL   )      return(summary_table) }"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/GOHTRANS.html","id":"model-selection","dir":"Articles","previous_headings":"","what":"Model selection","title":"GOHTRANS","text":"","code":"processedTongue = processDataCube(NPLStoolbox::Cornejo2025$Tongue_microbiome, sparsityThreshold = 0.5, considerGroups=TRUE, groupVariable=\"GenderID\", CLR=TRUE, centerMode=1, scaleMode=2) processedSaliva = processDataCube(NPLStoolbox::Cornejo2025$Salivary_microbiome, sparsityThreshold = 0.5, considerGroups=TRUE, groupVariable=\"GenderID\", CLR=TRUE, centerMode=1, scaleMode=2)  processedCytokines = NPLStoolbox::Cornejo2025$Salivary_cytokines processedCytokines$data = log(processedCytokines$data + 0.1300) # Remove subject 1, 18, 19, and 27 due to being an outlier processedCytokines$data = processedCytokines$data[-c(1,9,10,19),,] processedCytokines$mode1 = processedCytokines$mode1[-c(1,9,10,19),] processedCytokines$data = multiwayCenter(processedCytokines$data, 1) processedCytokines$data = multiwayScale(processedCytokines$data, 2)  processedBiochemistry = NPLStoolbox::Cornejo2025$Salivary_biochemistry processedBiochemistry$data = log(processedBiochemistry$data) processedBiochemistry$data = multiwayCenter(processedBiochemistry$data, 1) processedBiochemistry$data = multiwayScale(processedBiochemistry$data, 2) # assessment_tongue = parafac4microbiome::assessModelQuality(processedTongue$data, numRepetitions=10, numCores=10) # assessment_tongue$plots$overview # 1 or 2? #  # assessment_saliva = parafac4microbiome::assessModelQuality(processedSaliva$data, numRepetitions=10, numCores=10) # assessment_saliva$plots$overview # def 2 #  # assessment_cytokines = parafac4microbiome::assessModelQuality(processedCytokines$data, numRepetitions=10, numCores=10) # assessment_cytokines$plots$overview # def 2 #  # assessment_biochemistry = parafac4microbiome::assessModelQuality(processedBiochemistry$data, numRepetitions=10, numCores=10) # assessment_biochemistry$plots$overview # 2 or 3? # # saveRDS(assessment_tongue, \"./CP_assessment_tongue.RDS\") # saveRDS(assessment_saliva, \"./CP_assessment_saliva.RDS\") # saveRDS(assessment_cytokines, \"./CP_assessment_cytokines.RDS\") # saveRDS(assessment_biochemistry, \"./CP_assessment_biochemistry.RDS\") #  # assessment_tongue = readRDS(\"./CP_assessment_tongue.RDS\") # assessment_saliva = readRDS(\"./CP_assessment_saliva.RDS\") # assessment_cytokines = readRDS(\"./CP_assessment_cytokines.RDS\") # assessment_biochemistry = readRDS(\"./CP_assessment_biochemistry.RDS\") #  # a = assessment_tongue$metrics$CORCONDIA %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% pivot_longer(-index) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + xlab(\"Number of components\") + ylab(\"CORCONDIA\") + theme(text=element_text(size=16)) # b = assessment_saliva$metrics$CORCONDIA %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% pivot_longer(-index) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + xlab(\"Number of components\") + ylab(\"CORCONDIA\") + theme(text=element_text(size=16)) # c = assessment_cytokines$metrics$CORCONDIA %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% pivot_longer(-index) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + xlab(\"Number of components\") + ylab(\"CORCONDIA\") + theme(text=element_text(size=16)) # d = assessment_biochemistry$metrics$CORCONDIA %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% pivot_longer(-index) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + xlab(\"Number of components\") + ylab(\"CORCONDIA\") + theme(text=element_text(size=16)) # ggarrange(a,b,c,d) # colourCols = c(\"\", \"\", \"\") # legendTitles = c(\"\", \"\", \"\") # xLabels = c(\"Subject index\", \"Feature index\", \"Time index\") # legendColNums = c(2,5,0) # arrangeModes = c(FALSE, FALSE, FALSE) # continuousModes = c(FALSE,FALSE,TRUE) #  # stability_tongue = parafac4microbiome::assessModelStability(processedTongue, maxNumComponents=3, numFolds=10, colourCols=colourCols, legendTitles=legendTitles, xLabels = xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, numCores=parallel::detectCores()) # stability_tongue$modelPlots[[2]] # stability_tongue$modelPlots[[3]] #  # stability_saliva = parafac4microbiome::assessModelStability(processedSaliva, maxNumComponents=3, numFolds=10, colourCols=colourCols, legendTitles=legendTitles, xLabels = xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, numCores=parallel::detectCores()) # stability_saliva$modelPlots[[2]] # stability_saliva$modelPlots[[2]] #  # stability_cytokines = parafac4microbiome::assessModelStability(processedCytokines, maxNumComponents=3, numFolds=10, colourCols=colourCols, legendTitles=legendTitles, xLabels = xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, numCores=parallel::detectCores()) # stability_cytokines$modelPlots[[2]] # stability_cytokines$modelPlots[[3]] #  # stability_biochemistry = parafac4microbiome::assessModelStability(processedBiochemistry, maxNumComponents=3, numFolds=10, colourCols=colourCols, legendTitles=legendTitles, xLabels = xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, numCores=parallel::detectCores()) # stability_biochemistry$modelPlots[[2]] # stability_biochemistry$modelPlots[[3]] # cp_tongue = parafac4microbiome::parafac(processedTongue$data, nfac=2, nstart=100) # cp_saliva = parafac4microbiome::parafac(processedSaliva$data, nfac=2, nstart=100) # cp_cytokines = parafac4microbiome::parafac(processedCytokines$data, nfac=2, nstart=100) # cp_biochemistry = parafac4microbiome::parafac(processedBiochemistry$data, nfac=2, nstart=100) #  # saveRDS(cp_tongue, \"./cp_tongue.RDS\") # saveRDS(cp_saliva, \"./cp_saliva.RDS\") # saveRDS(cp_cytokines, \"./cp_cytokines.RDS\") # saveRDS(cp_biochemistry, \"./cp_biochemistry.RDS\")  cp_tongue = readRDS(\"./GOHTRANS/cp_tongue.RDS\") cp_saliva = readRDS(\"./GOHTRANS/cp_saliva.RDS\") cp_cytokines = readRDS(\"./GOHTRANS/cp_cytokines.RDS\") cp_biochemistry = readRDS(\"./GOHTRANS/cp_biochemistry.RDS\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/GOHTRANS.html","id":"tongue-microbiome","dir":"Articles","previous_headings":"","what":"Tongue microbiome","title":"GOHTRANS","text":"","code":"testMetadata(cp_tongue, 1, processedTongue) ## Joining with `by = join_by(subject, GenderID)` ##       Term    Estimate                                         CI    P_value ## 1 GenderID 121.4677838  -2.46115922752504e-05 – 0.242960179217603 0.05004334 ## 2      Age   1.2397817    -0.0120682478356951 – 0.014547811241472 0.85003536 ## 3      BOP   2.4968042 -0.00497023980355535 – 0.00996384822005768 0.49901353 ## 4     CODS   0.5381136   -0.0119608431733796 – 0.0130370704610451 0.93035385 ## 5       XI  -4.9945589   -0.0188281123330526 – 0.0088389945248416 0.46571634 ##    P_adjust ## 1 0.2502167 ## 2 0.9303539 ## 3 0.8316892 ## 4 0.9303539 ## 5 0.8316892 testMetadata(cp_tongue, 2, processedTongue) ## Joining with `by = join_by(subject, GenderID)` ##       Term  Estimate                                         CI   P_value ## 1 GenderID 59.914254    -0.0657307291997982 – 0.185559237353633 0.3370374 ## 2      Age -1.942659   -0.0157055547933125 – 0.0118202363189334 0.7746069 ## 3      BOP -1.262477 -0.00898474294192472 – 0.00645978948107809 0.7402082 ## 4     CODS -4.893111   -0.0178192803655215 – 0.0080330573884708 0.4445972 ## 5       XI -6.251158  -0.0205575397778675 – 0.00805522373616812 0.3783908 ##    P_adjust ## 1 0.7409954 ## 2 0.7746069 ## 3 0.7746069 ## 4 0.7409954 ## 5 0.7409954"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/GOHTRANS.html","id":"salivary-microbiome","dir":"Articles","previous_headings":"","what":"Salivary microbiome","title":"GOHTRANS","text":"","code":"testMetadata(cp_saliva, 1, processedSaliva) ## Joining with `by = join_by(subject, GenderID)` ##       Term    Estimate                                         CI   P_value ## 1 GenderID -45.0221163    -0.178052895480722 – 0.0880086629409456 0.4938634 ## 2      Age   3.0529562   -0.0115189644032717 – 0.0176248767956416 0.6710904 ## 3      BOP  -1.6631517 -0.00983935629840586 – 0.00651305291998757 0.6800939 ## 4     CODS  -0.9060191   -0.0145920276329919 – 0.0127799895072467 0.8931035 ## 5       XI   1.7175717   -0.0134297828369515 – 0.0168649263219845 0.8180171 ##    P_adjust ## 1 0.8931035 ## 2 0.8931035 ## 3 0.8931035 ## 4 0.8931035 ## 5 0.8931035 testMetadata(cp_saliva, 2, processedSaliva) ## Joining with `by = join_by(subject, GenderID)` ##       Term    Estimate                                        CI    P_value ## 1 GenderID 118.0788404  -0.00224170005304913 – 0.238399380941789 0.05412757 ## 2      Age   6.5090792 -0.00667058769451647 – 0.0196887461831477 0.32036701 ## 3      BOP   3.0035619 -0.00439145876278687 – 0.0103985825138551 0.41245932 ## 4     CODS   0.4777822  -0.0119006159669152 – 0.0128561802899763 0.93754365 ## 5       XI   0.3906881  -0.0133094337962947 – 0.0140908099806615 0.95383322 ##    P_adjust ## 1 0.2706379 ## 2 0.6874322 ## 3 0.6874322 ## 4 0.9538332 ## 5 0.9538332"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/GOHTRANS.html","id":"salivary-cytokines","dir":"Articles","previous_headings":"","what":"Salivary cytokines","title":"GOHTRANS","text":"","code":"testMetadata(cp_cytokines, 1, processedCytokines) ## Joining with `by = join_by(subject, GenderID)` ##       Term     Estimate                                        CI   P_value ## 1 GenderID -27.05017814    -0.251532298438523 – 0.197431942164215 0.8007915 ## 2      Age  16.67084513 -0.00723963736661261 – 0.0405813276341731 0.1579702 ## 3      BOP  -0.09082505  -0.0164640352183346 – 0.0162823851145396 0.9907222 ## 4     CODS -28.95668163     -0.402598657967525 – 0.34468529471301 0.8710047 ## 5       XI -15.99762836  -0.0429168315278513 – 0.0109215747988014 0.2245843 ##    P_adjust ## 1 0.9907222 ## 2 0.5614609 ## 3 0.9907222 ## 4 0.9907222 ## 5 0.5614609 testMetadata(cp_cytokines, 2, processedCytokines) ## Joining with `by = join_by(subject, GenderID)` ##       Term   Estimate                                        CI   P_value ## 1 GenderID 162.363038   -0.0550666388070594 – 0.379792714707578 0.1323173 ## 2      Age  -6.714968   -0.029874266224001 – 0.0164443312143381 0.5458402 ## 3      BOP -10.075196 -0.0259340174258618 – 0.00578362484505684 0.1957476 ## 4     CODS  95.954957    -0.265948494090199 – 0.457858408923401 0.5803389 ## 5       XI  -1.713409    -0.0277869044719951 – 0.02436008731968 0.8904703 ##    P_adjust ## 1 0.4893690 ## 2 0.7254237 ## 3 0.4893690 ## 4 0.7254237 ## 5 0.8904703"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/GOHTRANS.html","id":"salivary-biochemistry","dir":"Articles","previous_headings":"","what":"Salivary biochemistry","title":"GOHTRANS","text":"","code":"testMetadata(cp_biochemistry, 1, processedBiochemistry) ## Joining with `by = join_by(subject, GenderID)` ##       Term  Estimate                                         CI    P_value ## 1 GenderID 81.395726    -0.0343343553682499 – 0.197125807465893 0.16076105 ## 2      Age  3.177143  -0.00949969477808753 – 0.0158539800238245 0.61171034 ## 3      BOP  6.688526 -0.000424360420959855 – 0.0138014124523289 0.06428731 ## 4     CODS  4.938192  -0.00696794674040549 – 0.0168443303204457 0.40275497 ## 5       XI  8.405007  -0.00477242944168497 – 0.0215824425531161 0.20199880 ##    P_adjust ## 1 0.3366647 ## 2 0.6117103 ## 3 0.3214366 ## 4 0.5034437 ## 5 0.3366647 testMetadata(cp_biochemistry, 2, processedBiochemistry) ## Joining with `by = join_by(subject, GenderID)` ##       Term   Estimate                                        CI   P_value ## 1 GenderID -1.5487722    -0.106748335420374 – 0.103650791078514 0.9761557 ## 2      Age -0.3542818  -0.0118776277377812 – 0.0111690640408018 0.9502317 ## 3      BOP -4.8835426 -0.0113492128200526 – 0.00158212771674754 0.1330520 ## 4     CODS -5.6334319 -0.0164562063991478 – 0.00518934258952479 0.2954278 ## 5       XI -6.9012715  -0.018879665442852 – 0.00507712253655297 0.2478597 ##    P_adjust ## 1 0.9761557 ## 2 0.9761557 ## 3 0.4923796 ## 4 0.4923796 ## 5 0.4923796"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction","text":"Welcome parafac4microbiome R package! vignette explain datasets available package, can model using PARAFAC, plot outcome. require following packages dependencies.","code":"library(parafac4microbiome) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Introduction.html","id":"datasets","dir":"Articles","previous_headings":"","what":"Datasets","title":"Introduction","text":"parafac4microbiome package comes three exemplary datasets: Fujita2023, Shao2019 vanderPloeg2024. refer first authors respective papers. dataset objects lists following contents: data: data cube microbiome counts. mode1: metadata corresponding subject mode. mode2: metadata corresponding feature (microbial abundances) mode. mode3: metadata corresponding time mode. briefly show data datasets look like focus Fujita2023 remainder vignette. details datasets refer parafac4microbiome paper original papers listed respective help files. Modelling selecting appropriate number components explained detail vignettes corresponding dataset: vignette(\"Fujita2023\"), vignette(\"Shao2019\") vignette(\"vanderPloeg2024\").","code":"dim(Fujita2023$data) #> [1]   8  28 110 dim(Shao2019$data) #> [1] 395 959   4 dim(vanderPloeg2024$data) #> NULL  # We focus on Fujita2023 head(Fujita2023$data[,,1]) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #> [1,] 11932    0    0    0    0    0    0    0    0   113     0   161     0 #> [2,] 11532    0    0    0    0    0    0    0    0     0     0     0     0 #> [3,] 10331    0    0    0    0    0    0    0    0   236     0     0  1824 #> [4,] 11528    0    0    0    0    0    0    0    0     0     0     0     0 #> [5,] 13735    0    0    0    0    0    0    0    0   139     0     0     0 #> [6,]  9167    0    0    0    0    0    0    0    0   247     0     0     0 #>      [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] #> [1,]     0     0     0     0     0   719     0     0     0     0     0   230 #> [2,]     0     0     0     0     0     0     0    38     0     0     0     0 #> [3,]     0     0     0     0     0     0     0     0     0     0   162     0 #> [4,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [5,]   217     0     0     0     0   239     0     0    67     0     0     0 #> [6,]     0     0     0     0     0     0     0     0     0     0     0     0 #>      [,26] [,27] [,28] #> [1,]     0     0     0 #> [2,]     0     0   231 #> [3,]     0     0     0 #> [4,]     0     0     0 #> [5,]     0     0     0 #> [6,]     0     0     0 head(Fujita2023$mode1) #> # A tibble: 6 × 1 #>   replicate.id #>          <dbl> #> 1            1 #> 2            2 #> 3            3 #> 4            4 #> 5            5 #> 6            6 head(Fujita2023$mode2) #>       ID  Kingdom         Phylum               Class #> 1 X_0002 Bacteria Proteobacteria Gammaproteobacteria #> 2 X_0004 Bacteria     Firmicutes          Clostridia #> 3 X_0007 Bacteria Proteobacteria Gammaproteobacteria #> 4 X_0008 Bacteria Proteobacteria Gammaproteobacteria #> 5 X_0010 Bacteria Proteobacteria Gammaproteobacteria #> 6 X_0015 Bacteria     Firmicutes          Clostridia #>                                 Order                Family #> 1                       Aeromonadales        Aeromonadaceae #> 2 Peptostreptococcales-Tissierellales Peptostreptococcaceae #> 3                     Burkholderiales      Burkholderiaceae #> 4                     Burkholderiales      Burkholderiaceae #> 5                    Enterobacterales          unidentified #> 6                      Lachnospirales       Lachnospiraceae #>                                        Genus      Species #> 1                                  Aeromonas unidentified #> 2                             Clostridioides   mangenotii #> 3                                  Pandoraea unidentified #> 4 Burkholderia-Caballeronia-Paraburkholderia unidentified #> 5                               unidentified unidentified #> 6                          Lachnoclostridium unidentified head(Fujita2023$mode3) #> # A tibble: 6 × 1 #>    time #>   <dbl> #> 1     1 #> 2     2 #> 3     3 #> 4     4 #> 5     5 #> 6     6"},{"path":[]},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Introduction.html","id":"processing-the-data-cube","dir":"Articles","previous_headings":"Analysis","what":"Processing the data cube","title":"Introduction","text":"shown , data cube Fujita2023$data contains unprocessed counts. function processDataCube() performs processing counts following steps: performs feature selection based sparsityThreshold setting. Sparsity defined fraction samples microbial abundance (ASV/OTU otherwise) zero. performs centered log-ratio transformation sample using compositions::clr() function pseudo-count one (features, prior selection based sparsity). centers scales three-way array. complex subject, refer paper Rasmus Bro Age Smilde. centering across subject mode, make subjects comparable within time point. Scaling within feature mode avoids PARAFAC model focusing features abnormally high variation. outcome processing new version dataset. Please refer documentation processDataCube() information.","code":"processedFujita = processDataCube(Fujita2023, sparsityThreshold=0.99, CLR=TRUE, centerMode=1, scaleMode=2) head(processedFujita$data[,,1]) #>         [,1]   [,2]    [,3]    [,4]    [,5]   [,6]    [,7]    [,8]   [,9] #> [1,] -0.5098 -0.265 -0.2669 -0.2743 -0.3655 -0.562 -0.2923 -0.5410 -0.890 #> [2,]  0.0763  0.017  0.0171  0.0176  0.0234  0.036  0.0187  0.0346  0.057 #> [3,] -0.5155 -0.179 -0.1797 -0.1847 -0.2461 -0.378 -0.1969 -0.3644 -0.600 #> [4,]  0.5277  0.218  0.2197  0.2258  0.3008  0.462  0.2406  0.4454  0.733 #> [5,] -0.2311 -0.228 -0.2296 -0.2359 -0.3144 -0.483 -0.2514 -0.4653 -0.766 #> [6,] -0.0526  0.102  0.1022  0.1050  0.1399  0.215  0.1119  0.2071  0.341 #>       [,10]  [,11]  [,12]  [,13]  [,14]   [,15]   [,16] [,17]   [,18]  [,19] #> [1,]  0.544 -0.862 -1.703 -0.495 -0.672 -0.4608 -0.2023  9.04 -0.9420 -1.199 #> [2,] -0.805 -0.575 -0.998 -0.272  0.043  0.0295  0.0130 -2.88  0.0603  4.373 #> [3,]  0.818  3.962 -1.487 -0.427 -0.453 -0.3104 -0.1363 -3.50 -0.6344 -1.010 #> [4,] -0.703 -0.369 -0.495 -0.114  0.553  0.3793  0.1666 -2.25  0.7754 -0.142 #> [5,]  0.627 -0.824  6.713 -0.466 -0.578 -0.3964 -0.1740  7.02 -0.8102 -1.118 #> [6,]  0.975 -0.488 -0.787 -0.206  0.257  0.1764  0.0775 -2.62  0.3607 -0.398 #>        [,20]  [,21]   [,22]   [,23] #> [1,] -0.3990 10.070 -0.6812 -0.7411 #> [2,]  0.0255 -1.517  0.0436  0.0474 #> [3,] -0.2687 -2.252 -0.4588 -0.4991 #> [4,]  0.3285 -0.761  0.5608  0.6100 #> [5,] -0.3432 -2.438 -0.5860 -0.6374 #> [6,]  0.1528 -1.200  0.2608  0.2837"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Introduction.html","id":"making-a-parafac-model","dir":"Articles","previous_headings":"Analysis","what":"Making a PARAFAC model","title":"Introduction","text":"processed data ready modeled using Parallel Factor Analysis. arbitrarily set number factors (.e. number components) three. normally outcome detailed investigation correct number components, described vignette(\"Fujita2023\"), vignette(\"Shao2019\") vignette(\"vanderPloeg2024\"). output function list object containing PARAFAC loadings mode model$Fac statistics like R-squared sum squared error. model explains 38.113 percent variation processed data cube.","code":"set.seed(0) # for reproducibility model = parafac(processedFujita$data, nfac=3)  head(model$Fac[[1]]) #>       [,1]   [,2]   [,3] #> [1,] -9.49  7.589  13.76 #> [2,] -3.29 -6.672  12.05 #> [3,] 42.62  0.897  14.94 #> [4,] -7.12 22.768 -56.08 #> [5,] -3.77 -1.796   6.51 #> [6,] -3.14  3.563   6.27 head(model$Fac[[2]]) #>        [,1]    [,2]   [,3] #> [1,] 0.1800 -0.0471  0.355 #> [2,] 0.0414  0.1492 -0.250 #> [3,] 0.0406 -0.2300 -0.366 #> [4,] 0.0452 -0.2641 -0.365 #> [5,] 0.0566 -0.2339  0.234 #> [6,] 0.0783  0.1625 -0.287 head(model$Fac[[3]]) #>         [,1]     [,2]     [,3] #> [1,] -0.0920 -0.00324  0.00684 #> [2,] -0.1070 -0.00689 -0.00118 #> [3,] -0.1003 -0.02077  0.00856 #> [4,] -0.0997 -0.01231 -0.00195 #> [5,] -0.0911 -0.00229 -0.00277 #> [6,] -0.0924 -0.00237 -0.00319 model$varExp #> [1] 38.1"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Introduction.html","id":"plotting-a-parafac-model","dir":"Articles","previous_headings":"Analysis","what":"Plotting a PARAFAC model","title":"Introduction","text":"plotPARAFACmodel() function gives user full control want visualize model. , lot plotting options can used, can see . brief overview: colourCols: per mode (subject, feature, time), specifies variable loading bar plot colored. legendTitles: titles legends per mode, colourCode specified mode, legend generated. xLabels: labels x axis mode. legendColNums: number columns legend mode. colourCode specified mode, legend generated. arrangeModes: vector boolean values specifying loadings grouped colourCol easier inspection. continuousModes: vector boolean values specifying loadings visualized line plot instead default bar plot. overallTitle: title plot. full overview, please refer documentation plotPARAFACmodel().  concludes introduction parafac4microbiome package. hope gives sufficient information get started. details modelling specific datasets, please refer vignette(\"Fujita2023\"), vignette(\"Shao2019\") vignette(\"vanderPloeg2024\").","code":"plotPARAFACmodel(model$Fac, processedFujita,   numComponents = 3,   colourCols = c(\"\", \"Genus\", \"\"),   legendTitles = c(\"\", \"Genus\", \"\"),   xLabels = c(\"Replicate\", \"Feature index\", \"Time point\"),   legendColNums = c(0,5,0),   arrangeModes = c(FALSE, TRUE, FALSE),   continuousModes = c(FALSE,FALSE,TRUE),   overallTitle = \"Fujita PARAFAC model\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/MAINHEALTH.html","id":"preamble","dir":"Articles","previous_headings":"","what":"Preamble","title":"MAINHEALTH","text":"","code":"library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union library(tidyr) library(parafac4microbiome) library(NPLStoolbox) library(CMTFtoolbox) ##  ## Attaching package: 'CMTFtoolbox' ## The following object is masked from 'package:NPLStoolbox': ##  ##     npred ## The following objects are masked from 'package:parafac4microbiome': ##  ##     fac_to_vect, reinflateFac, reinflateTensor, vect_to_fac library(ggplot2) library(ggpubr) library(stringr) library(scales) library(ggpattern) testMetadata = function(model, comp, metadata){   transformedSubjectLoadings = model$Fac[[1]][,comp]   transformedSubjectLoadings = transformedSubjectLoadings / norm(transformedSubjectLoadings, \"2\")      result = lm(transformedSubjectLoadings ~ BMI + C.section + Secretor + Lewis + whz.6m, data=metadata$mode1)      # Extract coefficients and confidence intervals   coef_estimates <- summary(result)$coefficients   conf_intervals <- confint(result)      # Remove intercept   coef_estimates <- coef_estimates[rownames(coef_estimates) != \"(Intercept)\", ]   conf_intervals <- conf_intervals[rownames(conf_intervals) != \"(Intercept)\", ]      # Combine into a clean data frame   summary_table <- data.frame(     Term     = rownames(coef_estimates),     Estimate = coef_estimates[, \"Estimate\"] * 1e3,     CI       = paste0(                  conf_intervals[, 1], \" – \",                  conf_intervals[, 2]                ),     P_value  = coef_estimates[, \"Pr(>|t|)\"],     P_adjust = p.adjust(coef_estimates[, \"Pr(>|t|)\"], \"BH\"),     row.names = NULL   )      return(summary_table) } # Old approach # Needed colours: BMI groups (3) and phyla levels (6) # colours = hue_pal()(9) # #show_col(colours) # BMI_cols = colours[c(1,4,7)] # phylum_cols = colours[-c(1,4,7)]  # Rasmus's suggestion colours = RColorBrewer:: brewer.pal(8, \"Dark2\") BMI_cols = c(\"darkgreen\",\"darkgoldenrod\",\"darkred\") #colours[1:3] WHZ_cols = c(\"darkgreen\", \"darkgoldenrod\", \"dodgerblue4\") phylum_cols = colours processedFaeces = parafac4microbiome::processDataCube(NPLStoolbox::Jakobsen2025$faeces, sparsityThreshold = 0.75, centerMode=1, scaleMode=2) processedMilk = parafac4microbiome::processDataCube(NPLStoolbox::Jakobsen2025$milkMicrobiome, sparsityThreshold=0.85, centerMode=1, scaleMode=2) processedMilkMetab = parafac4microbiome::processDataCube(NPLStoolbox::Jakobsen2025$milkMetabolomics, CLR=FALSE, centerMode=1, scaleMode=2)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/MAINHEALTH.html","id":"model-selection","dir":"Articles","previous_headings":"","what":"Model selection","title":"MAINHEALTH","text":"","code":"# assessment_faeces = parafac4microbiome::assessModelQuality(processedFaeces$data, numRepetitions = 10, numCores = 10) # assessment_milk = parafac4microbiome::assessModelQuality(processedMilk$data, numRepetitions = 10, numCores = 10) # assessment_milkMetab = parafac4microbiome::assessModelQuality(processedMilkMetab$data, numRepetitions = 10, numCores = 10) #  # saveRDS(assessment_faeces, \"./MAINHEALTH/assessment_faeces.RDS\") # saveRDS(assessment_milk, \"./MAINHEALTH/assessment_milk.RDS\") # saveRDS(assessment_milkMetab, \"./MAINHEALTH/assessment_milkMetab.RDS\") #  # assessment_faeces = readRDS(\"./assessment_faeces.RDS\") # assessment_milk = readRDS(\"./assessment_milk.RDS\") # assessment_milkMetab = readRDS(\"./assessment_milkMetab.RDS\") #  # assessment_faeces$plots$overview # 2 or 3 components # assessment_faeces$plots$TCC[[3]] # 3 components seems safe #  # assessment_milk$plots$overview # likely 3 components # assessment_milk$plots$TCC[[3]] # 3 components seems safe #  # assessment_milkMetab$plots$overview # 2 or 3 components, likely 3 # assessment_milkMetab$plots$TCC[[3]] # 3 components seems safe #  # a = assessment_faeces$metrics$CORCONDIA %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% pivot_longer(-index) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + xlab(\"Number of components\") + ylab(\"CORCONDIA\") + theme(text=element_text(size=16)) # b = assessment_milk$metrics$CORCONDIA %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% pivot_longer(-index) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + xlab(\"Number of components\") + ylab(\"CORCONDIA\") + theme(text=element_text(size=16)) # c = assessment_milkMetab$metrics$CORCONDIA %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% pivot_longer(-index) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + xlab(\"Number of components\") + ylab(\"CORCONDIA\") + theme(text=element_text(size=16)) # ggarrange(a,b,c) # colourCols = c(\"\", \"\", \"\") # legendTitles = c(\"BMI group\", \"Phylum\", \"\") # xLabels = c(\"Subject index\", \"Feature index\", \"Time index\") # legendColNums = c(3,5,0) # arrangeModes = c(TRUE, TRUE, FALSE) # continuousModes = c(FALSE,FALSE,TRUE) #  # stability_faeces = parafac4microbiome::assessModelStability(processedFaeces, maxNumComponents=3, numFolds=20, colourCols=colourCols, legendTitles=legendTitles, xLabels = xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, numCores=parallel::detectCores()) # stability_faeces$modelPlots[[2]] # stability_faeces$modelPlots[[3]] #  # stability_milk = parafac4microbiome::assessModelStability(processedMilk, maxNumComponents=3, numFolds=10, colourCols=colourCols, legendTitles=legendTitles, xLabels = xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, numCores=parallel::detectCores()) # stability_milk$modelPlots[[2]] # stability_milk$modelPlots[[3]] #  # stability_milkMetab = parafac4microbiome::assessModelStability(processedMilkMetab, maxNumComponents=4, numFolds=10, colourCols=c(\"\", \"\", \"\"), legendTitles=c(\"BMI group\", \"Class\", \"\"), xLabels = xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, numCores=parallel::detectCores()) # stability_milkMetab$modelPlots[[3]] # stability_milkMetab$modelPlots[[4]]  #  # stability_faeces$modelPlots[[3]] # 3 components seems ok # stability_milk$modelPlots[[3]] # 3 components very unstable # stability_milk$modelPlots[[2]] # 2 components still a bit unstable # stability_milkMetab$modelPlots[[3]] # 3 components ok # cp_faeces = parafac4microbiome::parafac(processedFaeces$data, nfac=3, nstart = 100) # cp_milk = parafac4microbiome::parafac(processedMilk$data, nfac=2, nstart = 100) # cp_milkMetab = parafac4microbiome::parafac(processedMilkMetab$data, nfac=3, nstart = 100) #  # saveRDS(cp_faeces, \"./MAINHEALTH/cp_faeces.RDS\") # saveRDS(cp_milk, \"./MAINHEALTH/cp_milk.RDS\") # saveRDS(cp_milkMetab, \"./MAINHEALTH/cp_milkMetab.RDS\")  cp_faeces = readRDS(\"./MAINHEALTH/cp_faeces.RDS\") cp_milk = readRDS(\"./MAINHEALTH/cp_milk.RDS\") cp_milkMetab = readRDS(\"./MAINHEALTH/cp_milkMetab.RDS\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/MAINHEALTH.html","id":"faecal-microbiome","dir":"Articles","previous_headings":"","what":"Faecal microbiome","title":"MAINHEALTH","text":"","code":"testMetadata(cp_faeces, 1, processedFaeces) ##        Term   Estimate                                         CI    P_value ## 1       BMI   1.557682 -0.00109277376368493 – 0.00420813678843941 0.24698916 ## 2 C.section -17.096372   -0.0655708277484862 – 0.0313780847296313 0.48646498 ## 3  Secretor  11.375601   -0.0221113148908448 – 0.0448625169392564 0.50262459 ## 4     Lewis -86.360039   -0.181248173947069 – 0.00852809560447294 0.07407419 ## 5    whz.6m  -3.321885   -0.0160020917474101 – 0.0093583227214069 0.60504067 ##    P_adjust ## 1 0.6050407 ## 2 0.6050407 ## 3 0.6050407 ## 4 0.3703709 ## 5 0.6050407 testMetadata(cp_faeces, 2, processedFaeces) ##        Term   Estimate                                          CI    P_value ## 1       BMI   2.722216 -4.56020479994157e-06 – 0.00544899180328022 0.05037851 ## 2 C.section  46.004176     -0.003866118532671 – 0.0958744696412498 0.07028311 ## 3  Secretor  -7.108612      -0.041559794510577 – 0.027342570748067 0.68370085 ## 4     Lewis -60.366832     -0.157987302185625 – 0.0372536372194021 0.22330820 ## 5    whz.6m   1.450616    -0.0115947217747149 – 0.0144959541369427 0.82617195 ##    P_adjust ## 1 0.1757078 ## 2 0.1757078 ## 3 0.8261720 ## 4 0.3721803 ## 5 0.8261720"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/MAINHEALTH.html","id":"hm-microbiome","dir":"Articles","previous_headings":"","what":"HM microbiome","title":"MAINHEALTH","text":"","code":"testMetadata(cp_milk, 1, processedMilk) ##        Term    Estimate                                         CI   P_value ## 1       BMI  -0.7971158 -0.00356908227805278 – 0.00197485067980183 0.5702715 ## 2 C.section -27.2768492   -0.0779905182386613 – 0.0234368199177587 0.2891367 ## 3  Secretor   4.8853309    -0.0301641355434441 – 0.039934797247701 0.7830997 ## 4     Lewis  28.0599419     -0.071151776413022 – 0.127271660144112 0.5766273 ## 5    whz.6m   2.3991703    -0.0108741423856309 – 0.015672483059881 0.7211329 ##    P_adjust ## 1 0.7830997 ## 2 0.7830997 ## 3 0.7830997 ## 4 0.7830997 ## 5 0.7830997 testMetadata(cp_milk, 2, processedMilk) ##        Term   Estimate                                         CI    P_value ## 1       BMI   2.942392 0.000305899155017146 – 0.00557888463379954 0.02901701 ## 2 C.section  25.569124   -0.0226660263261727 – 0.0738042746886722 0.29612537 ## 3  Secretor   6.165320   -0.0271711809286324 – 0.0395018213417433 0.71494998 ## 4     Lewis -74.787457    -0.169150421245261 – 0.0195755080850167 0.11927081 ## 5    whz.6m  -3.204212  -0.0158288212471368 – 0.00942039651018406 0.61630886 ##    P_adjust ## 1 0.1450850 ## 2 0.4935423 ## 3 0.7149500 ## 4 0.2981770 ## 5 0.7149500 topIndices = processedMilk$mode2 %>% mutate(index=1:nrow(.), Comp = cp_milk$Fac[[2]][,2]) %>% arrange(desc(Comp)) %>% head() %>% select(index) %>% pull() bottomIndices = processedMilk$mode2 %>% mutate(index=1:nrow(.), Comp = cp_milk$Fac[[2]][,2]) %>% arrange(desc(Comp)) %>% tail() %>% select(index) %>% pull()  Xhat = parafac4microbiome::reinflateTensor(cp_milk$Fac[[1]][,2], cp_milk$Fac[[2]][,2], cp_milk$Fac[[3]][,2])  print(\"Positive loadings:\") ## [1] \"Positive loadings:\" print(cor(Xhat[,topIndices[1],1], processedMilk$mode1$BMI)) # no flip ## [1] 0.1705408 print(\"Negative loadings:\") ## [1] \"Negative loadings:\" print(cor(Xhat[,bottomIndices[1],1], processedMilk$mode1$BMI)) ## [1] -0.1705408 a = processedMilk$mode1 %>%   mutate(Component_2 = cp_milk$Fac[[1]][,2]) %>%   ggplot(aes(x=BMI,y=Component_2)) +   geom_point() +   stat_cor() +   xlab(\"ppBMI\") +   ylab(\"Loading\") +   theme(text=element_text(size=16))  df = processedMilk$mode2 %>%   mutate(Component_2 = cp_milk$Fac[[2]][,2]) %>%   arrange(Component_2) %>%   mutate(index=1:nrow(.)) %>%   mutate(Genus = gsub(\"g__\", \"\", V7), Species = gsub(\"s__\", \"\", V8)) %>%    mutate(Species = str_split_fixed(Species, \"_\", 2)[,2]) %>%    mutate(dplyr::across(.cols = Species, .fns = ~ dplyr::if_else(stringr::str_detect(.x, \"sp.\"), \"\", .x))) %>%   mutate(dplyr::across(.cols = Species, .fns = ~ dplyr::if_else(stringr::str_detect(.x, \"organism\"), \"\", .x))) %>%   mutate(dplyr::across(.cols = Species, .fns = ~ dplyr::if_else(stringr::str_detect(.x, \"bacterium\"), \"\", .x))) %>%   filter(index %in% c(1:10, 106:115))  df[df$Genus == \"\" & df$Species == \"\", \"Species\"] = \"Unknown\" df[df$Species == \"\", \"Species\"] = \"sp.\" df$name = paste0(df$Genus, \" \", df$Species)    b = df %>% ggplot(aes(x=Component_2,y=as.factor(index),fill=as.factor(V3))) +   geom_bar(stat=\"identity\", col=\"black\") +   xlab(\"Loading\") +   ylab(\"\") +   scale_y_discrete(labels=df$name) +   scale_fill_manual(name=\"Phylum\", values=hue_pal()(5)[-c(2,5)], labels=c(\"Actinobacteriota\", \"Firmicutes\", \"Proteobacteria\")) +   theme(text=element_text(size=16))  c = cp_milk$Fac[[3]][,2] %>%   as_tibble() %>%    mutate(value=value) %>%    ggplot(aes(x=c(0,30,60,90),y=value)) +   geom_line() +   geom_point() +   xlab(\"Time point [day]\") +   ylab(\"Loading\") +   ylim(0,1) +   theme(text=element_text(size=16))  a b c"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/MAINHEALTH.html","id":"hm-metabolome","dir":"Articles","previous_headings":"","what":"HM metabolome","title":"MAINHEALTH","text":"","code":"testMetadata(cp_milkMetab, 1, processedMilkMetab) ##        Term  Estimate                                          CI    P_value ## 1       BMI -2.583661 -0.00535718628987143 – 0.000189863674592802 0.06760372 ## 2 C.section -9.956381    -0.0605921878622612 – 0.0406794268355845 0.69782750 ## 3  Secretor  9.252236    -0.0261442697993304 – 0.0446487419625543 0.60584696 ## 4     Lewis 92.519158     -0.0281341347345387 – 0.213172450952438 0.13163311 ## 5    whz.6m 10.497357   -0.00275014531882957 – 0.0237448598441314 0.11934771 ##    P_adjust ## 1 0.2193885 ## 2 0.6978275 ## 3 0.6978275 ## 4 0.2193885 ## 5 0.2193885 testMetadata(cp_milkMetab, 2, processedMilkMetab) ##        Term    Estimate                                        CI      P_value ## 1       BMI   0.1116855 -0.00080493346242961 – 0.0010283045137446 8.098366e-01 ## 2 C.section  11.0721065 -0.00566246154228743 – 0.0278066745141615 1.927839e-01 ## 3  Secretor 177.1666463     0.165468496949462 – 0.188864795602086 6.443800e-59 ## 4     Lewis -37.4429441 -0.0773175080477337 – 0.00243161979792261 6.545970e-02 ## 5    whz.6m   1.6165731 -0.0027615783945977 – 0.00599472449699943 4.662904e-01 ##       P_adjust ## 1 8.098366e-01 ## 2 3.213065e-01 ## 3 3.221900e-58 ## 4 1.636492e-01 ## 5 5.828630e-01 testMetadata(cp_milkMetab, 3, processedMilkMetab) ##        Term   Estimate                                          CI   P_value ## 1       BMI  -1.716400 -0.00415552494908338 – 0.000722724998462952 0.1661829 ## 2 C.section -22.466123    -0.0669968421278869 – 0.0220645963398689 0.3199733 ## 3  Secretor  -6.672137    -0.0378009361212165 – 0.0244566617238421 0.6721456 ## 4     Lewis -22.466704     -0.128572999236914 – 0.0836395906101599 0.6758950 ## 5    whz.6m   3.066525   -0.00858374497479842 – 0.0147167946587828 0.6033337 ##   P_adjust ## 1 0.675895 ## 2 0.675895 ## 3 0.675895 ## 4 0.675895 ## 5 0.675895 topIndices = processedMilkMetab$mode2 %>% mutate(index=1:nrow(.), Comp = cp_milkMetab$Fac[[2]][,2]) %>% arrange(desc(Comp)) %>% head() %>% select(index) %>% pull() bottomIndices = processedMilkMetab$mode2 %>% mutate(index=1:nrow(.), Comp = cp_milkMetab$Fac[[2]][,2]) %>% arrange(desc(Comp)) %>% tail() %>% select(index) %>% pull()  Xhat = parafac4microbiome::reinflateTensor(cp_milkMetab$Fac[[1]][,2], cp_milkMetab$Fac[[2]][,2], cp_milkMetab$Fac[[3]][,2])  print(\"Positive loadings:\") ## [1] \"Positive loadings:\" print(cor(Xhat[,topIndices[1],1], processedMilkMetab$mode1$Secretor)) # flip ## [1] -0.9257706 print(\"Negative loadings:\") ## [1] \"Negative loadings:\" print(cor(Xhat[,bottomIndices[1],1], processedMilkMetab$mode1$Secretor)) ## [1] 0.9257706 a = processedMilkMetab$mode1 %>%   mutate(Component_2 = cp_milkMetab$Fac[[1]][,2]) %>%   ggplot(aes(x=as.factor(Secretor),y=Component_2)) +   geom_boxplot() +   stat_compare_means() +   xlab(\"Secretor status\") +   ylab(\"Loading\") +   scale_x_discrete(labels=c(\"Se-\", \"Se+\")) +   theme(text=element_text(size=16))  temp = processedMilkMetab$mode2 %>%   mutate(Component_2 = -1*cp_milkMetab$Fac[[2]][,2]) %>%   arrange(Component_2) %>%   mutate(index=1:nrow(.)) %>%   filter(index %in% c(1:10, 61:70))  b=temp %>%   ggplot(aes(x=Component_2,y=as.factor(index),fill=as.factor(Class),pattern=as.factor(Class))) +   geom_bar_pattern(stat=\"identity\",                    colour=\"black\",                    pattern=\"stripe\",                    pattern_fill=\"black\",                    pattern_density=0.2,                    pattern_spacing=0.05,                    pattern_angle=45,                    pattern_size=0.2) +   scale_y_discrete(label=temp$Metabolite) +   xlab(\"Loading\") +   ylab(\"\") +   scale_fill_manual(name=\"Class\", values=hue_pal()(7)[-c(4,5)], labels=c(\"Amino acids and derivatives\", \"Energy related\", \"Fatty acids and derivatives\", \"Oligosaccharides\", \"Sugars\")) +   theme(text=element_text(size=16))  c = cp_milkMetab$Fac[[3]][,2] %>%   as_tibble() %>%    mutate(value=value*-1) %>%    ggplot(aes(x=c(0,30,60,90),y=value)) +   geom_line() +   geom_point() +   xlab(\"Time point [day]\") +   ylab(\"Loading\") +   ylim(0,1) +   theme(text=element_text(size=16))  a b c"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Shao2019.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Shao2019","text":"vignette PARAFAC model created Shao2019 data. done first processing count data. Subsequently, appropriate number components determined. PARAFAC model created visualized.","code":"library(parafac4microbiome) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(ggpubr)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Shao2019.html","id":"processing-the-data-cube","dir":"Articles","previous_headings":"","what":"Processing the data cube","title":"Shao2019","text":"data cube Shao2019$data contains unprocessed counts. function processDataCube() performs processing counts following steps: performs feature selection based sparsityThreshold setting. Sparsity defined fraction samples microbial abundance (ASV/OTU otherwise) zero. , taking sparsity per subject group account setting considerGroups=TRUE telling function stratify based “Delivery_mode” factor. automatically applies sparsityThreshold per group. result, microbiota kept abundant least one group. performs centered log-ratio transformation sample using compositions::clr() function pseudo-count one (features, prior selection based sparsity). centers scales three-way array. complex subject, refer paper Rasmus Bro Age Smilde. centering across subject mode, make subjects comparable within time point. Scaling within feature mode avoids PARAFAC model focusing features abnormally high variation. outcome processing new version dataset called processedShao. Please refer documentation processDataCube() information.","code":"processedShao = processDataCube(Shao2019, sparsityThreshold=0.9, considerGroups=TRUE, groupVariable=\"Delivery_mode\", CLR=TRUE, centerMode=1, scaleMode=2)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Shao2019.html","id":"determining-the-correct-number-of-components","dir":"Articles","previous_headings":"","what":"Determining the correct number of components","title":"Shao2019","text":"critical aspect PARAFAC modelling determine correct number components. developed functions assessModelQuality() assessModelStability() purpose. First, assess model quality specify minimum maximum number components investigate number randomly initialized models try number components. Note: vignette reflects minimum working example analyzing dataset due computational limitations automatic vignette rendering. Hence, look 1-4 components 5 random initializations . settings ideal real datasets. Please refer documentation assessModelQuality() information. overview plot showcases number iterations, sum--squared error, CORCONDIA variance explained 1-4 components. overview plots shows can explain 8-10% variation three-component model. quite low. CORCONDIA number components well minimum requirement 60. However, four-component model yields much lower CORCONDIA values.","code":"# Setup # For computational purposes we deviate from the default settings minNumComponents = 1 maxNumComponents = 4 numRepetitions = 3 # number of randomly initialized models numFolds = 5 # number of jack-knifed models maxit = 200 ctol= 1e-5 # this is a really bad setting but is needed to save computational time numCores = 1  colourCols = c(\"Delivery_mode\", \"phylum\", \"\") legendTitles = c(\"Delivery mode\", \"Phylum\", \"\") xLabels = c(\"Subject index\", \"Feature index\", \"Time index\") legendColNums = c(3,5,0) arrangeModes = c(TRUE, TRUE, FALSE) continuousModes = c(FALSE,FALSE,TRUE)  # Assess the metrics to determine the correct number of components qualityAssessment = assessModelQuality(processedShao$data, minNumComponents, maxNumComponents, numRepetitions, ctol=ctol, maxit=maxit, numCores=numCores) qualityAssessment$plots$overview"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Shao2019.html","id":"jack-knifed-models","dir":"Articles","previous_headings":"","what":"Jack-knifed models","title":"Shao2019","text":"Next, investigate stability models jack-knifing samples using assessModelStability(). give us information choose 3 4 components.    model stable 1-4 components. Hence three-component appropriate number components based CORCONDIA score.","code":"stabilityAssessment = assessModelStability(processedShao, minNumComponents=1, maxNumComponents=4, numFolds=numFolds, considerGroups=TRUE,                                            groupVariable=\"Delivery_mode\", colourCols, legendTitles, xLabels, legendColNums, arrangeModes,                                            ctol=ctol, maxit=maxit, numCores=numCores)  stabilityAssessment$modelPlots[[1]] stabilityAssessment$modelPlots[[2]] stabilityAssessment$modelPlots[[3]] stabilityAssessment$modelPlots[[4]]"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Shao2019.html","id":"model-selection","dir":"Articles","previous_headings":"","what":"Model selection","title":"Shao2019","text":"decided three-component model appropriate Shao2019 dataset. can now select one random initializations assessNumComponents() output final model. ’re going select random initialisation corresponded maximum amount variation explained three components. Finally, visualize model using plotPARAFACmodel().  observe loadings modes components negative. due sign flipping: two modes negative loadings cancel describe thing two positive loadings. flipLoadings() function automatically performs procedure also sorts components much variation describe.","code":"numComponents = 3 modelChoice = which(qualityAssessment$metrics$varExp[,numComponents] == max(qualityAssessment$metrics$varExp[,numComponents])) finalModel = qualityAssessment$models[[numComponents]][[modelChoice]] plotPARAFACmodel(finalModel$Fac, processedShao, 3, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,   continuousModes = c(FALSE,FALSE,TRUE),   overallTitle = \"Shao PARAFAC model\") finalModel = flipLoadings(finalModel, processedShao$data)  plotPARAFACmodel(finalModel$Fac, processedShao, 3, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,   continuousModes = c(FALSE,FALSE,TRUE),   overallTitle = \"Shao PARAFAC model\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/TIFN2.html","id":"preamble","dir":"Articles","previous_headings":"","what":"Preamble","title":"TIFN2","text":"","code":"library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union library(tidyr) library(parafac4microbiome) library(NPLStoolbox) library(CMTFtoolbox) ##  ## Attaching package: 'CMTFtoolbox' ## The following object is masked from 'package:NPLStoolbox': ##  ##     npred ## The following objects are masked from 'package:parafac4microbiome': ##  ##     fac_to_vect, reinflateFac, reinflateTensor, vect_to_fac library(ggplot2) library(ggpubr) library(scales) rf_data = read.csv(\"../../data-raw/vanderPloeg2024/RFdata.csv\") colnames(rf_data) = c(\"subject\", \"id\", \"fotonr\", \"day\", \"group\", \"RFgroup\", \"MQH\", \"SPS(tm)\", \"Area_delta_R30\", \"Area_delta_Rmax\", \"Area_delta_R30_x_Rmax\", \"gingiva_mean_R_over_G\", \"gingiva_mean_R_over_G_upper_jaw\", \"gingiva_mean_R_over_G_lower_jaw\") rf_data = rf_data %>% as_tibble()  rf_data[rf_data$subject == \"VSTPHZ\", 1] = \"VSTPH2\" rf_data[rf_data$subject == \"D2VZH0\", 1] = \"DZVZH0\" rf_data[rf_data$subject == \"DLODNN\", 1] = \"DLODDN\" rf_data[rf_data$subject == \"O3VQFX\", 1] = \"O3VQFQ\" rf_data[rf_data$subject == \"F80LGT\", 1] = \"F80LGF\" rf_data[rf_data$subject == \"26QQR0\", 1] = \"26QQrO\"  rf_data2 = read.csv(\"../../data-raw/vanderPloeg2024/red_fluorescence_data.csv\") %>% as_tibble() rf_data2 = rf_data2[,c(2,4,181:192)] rf_data = rf_data %>% left_join(rf_data2) ## Joining with `by = join_by(id, day)` rf = rf_data %>% select(subject, RFgroup) %>% unique() age_gender = read.csv(\"../../data-raw/vanderPloeg2024/Ploeg_subjectMetadata.csv\", sep=\";\") age_gender = age_gender[2:nrow(age_gender),2:ncol(age_gender)] age_gender = age_gender %>% as_tibble() %>% filter(onderzoeksgroep == 0) %>% select(naam, leeftijd, geslacht) colnames(age_gender) = c(\"subject\", \"age\", \"gender\")  # Correction for incorrect subject ids age_gender[age_gender$subject == \"VSTPHZ\", 1] = \"VSTPH2\" age_gender[age_gender$subject == \"D2VZH0\", 1] = \"DZVZH0\" age_gender[age_gender$subject == \"DLODNN\", 1] = \"DLODDN\" age_gender[age_gender$subject == \"O3VQFX\", 1] = \"O3VQFQ\" age_gender[age_gender$subject == \"F80LGT\", 1] = \"F80LGF\" age_gender[age_gender$subject == \"26QQR0\", 1] = \"26QQrO\"  age_gender = age_gender %>% arrange(subject) mapping = c(-14,0,2,5,9,14,21)  testMetadata = function(model, comp, metadata){   transformedSubjectLoadings = model$Fac[[1]][,comp]   transformedSubjectLoadings = transformedSubjectLoadings / norm(transformedSubjectLoadings, \"2\")      metadata = metadata$mode1 %>% left_join(rf_data %>% select(subject,day,Area_delta_R30,plaquepercent,bomppercent) %>% filter(day==14), by=\"subject\")      result = lm(transformedSubjectLoadings ~ plaquepercent + bomppercent + Area_delta_R30 + gender + age, data=metadata)      # Extract coefficients and confidence intervals   coef_estimates <- summary(result)$coefficients   conf_intervals <- confint(result)      # Remove intercept   coef_estimates <- coef_estimates[rownames(coef_estimates) != \"(Intercept)\", ]   conf_intervals <- conf_intervals[rownames(conf_intervals) != \"(Intercept)\", ]      # Combine into a clean data frame   summary_table <- data.frame(     Term     = rownames(coef_estimates),     Estimate = coef_estimates[, \"Estimate\"] * 1e3,     CI       = paste0(                  conf_intervals[, 1], \" – \",                  conf_intervals[, 2]                ),     P_value  = coef_estimates[, \"Pr(>|t|)\"],     P_adjust = p.adjust(coef_estimates[, \"Pr(>|t|)\"], \"BH\"),     row.names = NULL   )      return(summary_table) }  testFeatures = function(model, metadata, componentNum, metadataVar){   df = metadata$mode1 %>% left_join(rf_data %>% filter(day==14)) %>% left_join(age_gender)   topIndices = metadata$mode2 %>% mutate(index=1:nrow(.), Comp = model$Fac[[2]][,componentNum]) %>% arrange(desc(Comp)) %>% head() %>% select(index) %>% pull()   bottomIndices = metadata$mode2 %>% mutate(index=1:nrow(.), Comp = model$Fac[[2]][,componentNum]) %>% arrange(desc(Comp)) %>% tail() %>% select(index) %>% pull()      timepoint = which(abs(model$Fac[[3]][,componentNum]) == max(abs(model$Fac[[3]][,componentNum])))      Xhat = parafac4microbiome::reinflateTensor(model$Fac[[1]][,componentNum], model$Fac[[2]][,componentNum], model$Fac[[3]][,componentNum])   y = df[metadataVar]      print(\"Positive loadings:\")   print(cor(Xhat[,topIndices[1],timepoint], y))   print(\"Negative loadings:\")   print(cor(Xhat[,bottomIndices[1],timepoint], y)) }  plotFeatures = function(mode2, model, componentNum, flip=FALSE){      if(flip==TRUE){     df = mode2 %>% mutate(Comp = -1*model$Fac[[2]][,componentNum]) %>% arrange(Comp) %>% filter(Species != \"\") %>% mutate(index=1:nrow(.), name = paste(Genus, Species))   } else{     df = mode2 %>% mutate(Comp = model$Fac[[2]][,componentNum]) %>% arrange(Comp) %>% filter(Species != \"\") %>% mutate(index=1:nrow(.), name = paste(Genus, Species))   }   df = rbind(df %>% head(n=10), df %>% tail(n=10))      plot=df %>%     ggplot(aes(x=Comp,y=as.factor(index),fill=as.factor(Phylum))) +     geom_bar(stat=\"identity\", col=\"black\") +     scale_y_discrete(label=df$name) +     xlab(\"Loading\") +     ylab(\"\") +     guides(fill=guide_legend(title=\"Phylum\")) +     theme(text=element_text(size=16))      return(plot) } phylum_colors = hue_pal()(7)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/TIFN2.html","id":"processing","dir":"Articles","previous_headings":"","what":"Processing","title":"TIFN2","text":"","code":"processedTongue = processDataCube(parafac4microbiome::vanderPloeg2024$tongue, sparsityThreshold=0.50, considerGroups=TRUE, groupVariable=\"RFgroup\", CLR=TRUE, centerMode=1, scaleMode=2) processedLowling = processDataCube(parafac4microbiome::vanderPloeg2024$lower_jaw_lingual, sparsityThreshold=0.50, considerGroups=TRUE, groupVariable=\"RFgroup\", CLR=TRUE, centerMode=1, scaleMode=2) processedLowinter = processDataCube(parafac4microbiome::vanderPloeg2024$lower_jaw_interproximal, sparsityThreshold=0.50, considerGroups=TRUE, groupVariable=\"RFgroup\", CLR=TRUE, centerMode=1, scaleMode=2) processedUpling = processDataCube(parafac4microbiome::vanderPloeg2024$upper_jaw_lingual, sparsityThreshold=0.50, considerGroups=TRUE, groupVariable=\"RFgroup\", CLR=TRUE, centerMode=1, scaleMode=2) processedUpinter = processDataCube(parafac4microbiome::vanderPloeg2024$upper_jaw_interproximal, sparsityThreshold=0.50, considerGroups=TRUE, groupVariable=\"RFgroup\", CLR=TRUE, centerMode=1, scaleMode=2) processedSaliva = processDataCube(parafac4microbiome::vanderPloeg2024$saliva, sparsityThreshold=0.50, considerGroups=TRUE, groupVariable=\"RFgroup\", CLR=TRUE, centerMode=1, scaleMode=2) processedMetabolomics = parafac4microbiome::vanderPloeg2024$metabolomics"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/TIFN2.html","id":"model-selection","dir":"Articles","previous_headings":"","what":"Model selection","title":"TIFN2","text":"","code":"# assessment_tongue = parafac4microbiome::assessModelQuality(processedTongue$data, numRepetitions=10, numCores=10) # assessment_lowling = parafac4microbiome::assessModelQuality(processedLowling$data, numRepetitions=10, numCores=10) # assessment_lowinter = parafac4microbiome::assessModelQuality(processedLowinter$data, numRepetitions=10, numCores=10) # assessment_upling = parafac4microbiome::assessModelQuality(processedUpling$data, numRepetitions=10, numCores=10) # assessment_upinter = parafac4microbiome::assessModelQuality(processedUpinter$data, numRepetitions=10, numCores=10) # assessment_saliva = parafac4microbiome::assessModelQuality(processedSaliva$data, numRepetitions=10, numCores=10) # assessment_metab = parafac4microbiome::assessModelQuality(processedMetabolomics$data, numRepetitions=10, numCores=10) #  # a = assessment_tongue$metrics$CORCONDIA %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% pivot_longer(-index) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + xlab(\"Number of components\") + ylab(\"CORCONDIA\") + theme(text=element_text(size=16)) # b = assessment_lowling$metrics$CORCONDIA %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% pivot_longer(-index) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + xlab(\"Number of components\") + ylab(\"CORCONDIA\") + theme(text=element_text(size=16)) # c = assessment_lowinter$metrics$CORCONDIA %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% pivot_longer(-index) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + xlab(\"Number of components\") + ylab(\"CORCONDIA\") + theme(text=element_text(size=16)) # d = assessment_upling$metrics$CORCONDIA %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% pivot_longer(-index) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + xlab(\"Number of components\") + ylab(\"CORCONDIA\") + theme(text=element_text(size=16)) # e = assessment_upinter$metrics$CORCONDIA %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% pivot_longer(-index) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + xlab(\"Number of components\") + ylab(\"CORCONDIA\") + theme(text=element_text(size=16)) # f = assessment_saliva$metrics$CORCONDIA %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% pivot_longer(-index) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + xlab(\"Number of components\") + ylab(\"CORCONDIA\") + theme(text=element_text(size=16)) # g = assessment_metab$metrics$CORCONDIA %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% pivot_longer(-index) %>% ggplot(aes(x=as.factor(name),y=value)) + geom_boxplot() + xlab(\"Number of components\") + ylab(\"CORCONDIA\") + theme(text=element_text(size=16)) # ggarrange(a,b,c,d,e,f,g, nrow=4, ncol=2) # colourCols = c(\"\", \"\", \"\") # legendTitles = c(\"RF group\", \"Phylum\", \"\") # xLabels = c(\"Subject index\", \"Feature index\", \"Time index\") # legendColNums = c(3,5,0) # arrangeModes = c(TRUE, TRUE, FALSE) # continuousModes = c(FALSE,FALSE,TRUE) #  # stability_tongue = parafac4microbiome::assessModelStability(processedTongue, maxNumComponents=3, numFolds=10, colourCols=colourCols, legendTitles=legendTitles, xLabels = xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, numCores=parallel::detectCores()) # stability_tongue$modelPlots[[2]] # stability_tongue$modelPlots[[3]] #  # stability_lowling = parafac4microbiome::assessModelStability(processedLowling, maxNumComponents=2, numFolds=10, colourCols=colourCols, legendTitles=legendTitles, xLabels = xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, numCores=parallel::detectCores()) # stability_lowling$modelPlots[[1]] # stability_lowling$modelPlots[[2]] #  # stability_lowinter = parafac4microbiome::assessModelStability(processedLowinter, maxNumComponents=3, numFolds=10, colourCols=colourCols, legendTitles=legendTitles, xLabels = xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, numCores=parallel::detectCores()) # stability_lowinter$modelPlots[[2]] # stability_lowinter$modelPlots[[3]] #  # stability_upling = parafac4microbiome::assessModelStability(processedUpling, maxNumComponents=3, numFolds=10, colourCols=colourCols, legendTitles=legendTitles, xLabels = xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, numCores=parallel::detectCores()) # stability_upling$modelPlots[[2]] # stability_upling$modelPlots[[3]] #  # stability_upinter = parafac4microbiome::assessModelStability(processedUpinter, maxNumComponents=3, numFolds=10, colourCols=colourCols, legendTitles=legendTitles, xLabels = xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, numCores=parallel::detectCores()) # stability_upinter$modelPlots[[2]] # stability_upinter$modelPlots[[3]] #  # stability_saliva = parafac4microbiome::assessModelStability(processedSaliva, maxNumComponents=3, numFolds=10, colourCols=colourCols, legendTitles=legendTitles, xLabels = xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, numCores=parallel::detectCores()) # stability_saliva$modelPlots[[2]] # stability_saliva$modelPlots[[3]] #  # stability_metab = parafac4microbiome::assessModelStability(processedMetabolomics, maxNumComponents=2, numFolds=10, colourCols=colourCols, legendTitles=legendTitles, xLabels = xLabels, legendColNums=legendColNums, arrangeModes=arrangeModes, numCores=parallel::detectCores()) # stability_metab$modelPlots[[1]] # stability_metab$modelPlots[[2]] # cp_tongue = parafac4microbiome::parafac(processedTongue$data, nfac=2, nstart=100) # cp_lowling = parafac4microbiome::parafac(processedLowling$data, nfac=1, nstart=100) # cp_lowinter = parafac4microbiome::parafac(processedLowinter$data, nfac=2, nstart=100) # cp_upling = parafac4microbiome::parafac(processedUpling$data, nfac=2, nstart=100) # cp_upinter = parafac4microbiome::parafac(processedUpinter$data, nfac=2, nstart=100) # cp_saliva = parafac4microbiome::parafac(processedSaliva$data, nfac=2, nstart=100) # cp_metabolomics = parafac4microbiome::parafac(processedMetabolomics$data, nfac=1, nstart=100)  # saveRDS(cp_tongue, \"./cp_tongue.RDS\") # saveRDS(cp_lowling, \"./cp_lowling.RDS\") # saveRDS(cp_lowinter, \"./cp_lowinter.RDS\") # saveRDS(cp_upling, \"./cp_upling.RDS\") # saveRDS(cp_upinter, \"./cp_upinter.RDS\") # saveRDS(cp_saliva, \"./cp_saliva.RDS\") # saveRDS(cp_metabolomics, \"./cp_metabolomics.RDS\")  cp_tongue = readRDS(\"./TIFN2/cp_tongue.RDS\") cp_lowling = readRDS(\"./TIFN2/cp_lowling.RDS\") cp_lowinter = readRDS(\"./TIFN2/cp_lowinter.RDS\") cp_upling = readRDS(\"./TIFN2/cp_upling.RDS\") cp_upinter = readRDS(\"./TIFN2/cp_upinter.RDS\") cp_saliva = readRDS(\"./TIFN2/cp_saliva.RDS\") cp_metabolomics = readRDS(\"./TIFN2/cp_metabolomics.RDS\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/TIFN2.html","id":"tongue-microbiome","dir":"Articles","previous_headings":"","what":"Tongue microbiome","title":"TIFN2","text":"","code":"testMetadata(cp_tongue, 1, processedTongue) ##             Term  Estimate                                         CI ## 1  plaquepercent -7.085726 -0.0125436561188763 – -0.00162779504204587 ## 2    bomppercent  1.189991 -0.00221993077742614 – 0.00459991246706438 ## 3 Area_delta_R30  2.527468 -0.00434891510321956 – 0.00940385109507837 ## 4         gender 11.109220    -0.0857143066863078 – 0.107932746588392 ## 5            age 13.793423   0.00516939627811755 – 0.0224174495211815 ##       P_value   P_adjust ## 1 0.012433782 0.03108445 ## 2 0.483348754 0.60418594 ## 3 0.460540316 0.60418594 ## 4 0.817174114 0.81717411 ## 5 0.002572981 0.01286491 testMetadata(cp_tongue, 2, processedTongue) ##             Term   Estimate                                         CI ## 1  plaquepercent  -0.877180 -0.00719453415388883 – 0.00544017410099945 ## 2    bomppercent  -2.057600  -0.0060044593190253 – 0.00188925874240208 ## 3 Area_delta_R30  -5.035993   -0.012995154144287 – 0.00292316758866404 ## 4         gender -42.102114    -0.154171789877283 – 0.0699675615970461 ## 5            age   2.246435  -0.00773555910142959 – 0.0122284290033156 ##     P_value  P_adjust ## 1 0.7796915 0.7796915 ## 2 0.2971467 0.7428669 ## 3 0.2074012 0.7428669 ## 4 0.4507719 0.7512864 ## 5 0.6505852 0.7796915 testFeatures(cp_tongue, processedTongue, 1, \"plaquepercent\") # no flip ## Joining with `by = join_by(subject, RFgroup)` ## Joining with `by = join_by(subject, age, gender)` ## [1] \"Positive loadings:\" ##      plaquepercent ## [1,]     0.3063565 ## [1] \"Negative loadings:\" ##      plaquepercent ## [1,]    -0.3063565 testFeatures(cp_tongue, processedTongue, 1, \"age\") # flip ## Joining with `by = join_by(subject, RFgroup)` ## Joining with `by = join_by(subject, age, gender)` ## [1] \"Positive loadings:\" ##             age ## [1,] -0.4538388 ## [1] \"Negative loadings:\" ##            age ## [1,] 0.4538388 a = processedTongue$mode1 %>%   mutate(Component_1 = cp_tongue$Fac[[1]][,1]) %>%   left_join(rf_data %>% select(subject,day,Area_delta_R30,plaquepercent,bomppercent) %>% filter(day==14), by=\"subject\") %>%   ggplot(aes(x=plaquepercent,y=Component_1)) +   geom_point() +   xlab(\"Plaque%\") +   ylab(\"Loading\") +   stat_cor() +   theme(text=element_text(size=16))  b = plotFeatures(processedTongue$mode2, cp_tongue, 1, flip=FALSE) + scale_fill_manual(values=phylum_colors[-c(3,7)]) + theme(legend.position=\"none\")  c = processedTongue$mode3 %>%   mutate(Component_1 = -1*cp_tongue$Fac[[3]][,1], day=c(-14,0,2,5,9,14,21)) %>%   ggplot(aes(x=day,y=Component_1)) +   annotate(geom = \"rect\", xmin = 0, xmax = 14, ymin = -Inf, ymax = Inf, fill = \"red\", colour = \"black\", alpha=0.25) +   geom_line() +   geom_point() +   xlab(\"Time point [days]\") +   ylab(\"Loading\") +   ylim(0,1) +   theme(legend.position=\"none\", text=element_text(size=16))  a b c"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/TIFN2.html","id":"lower-jaw-lingual-microbiome","dir":"Articles","previous_headings":"","what":"Lower jaw lingual microbiome","title":"TIFN2","text":"","code":"testMetadata(cp_lowling, 1, processedLowling) ##             Term   Estimate                                          CI ## 1  plaquepercent  -4.047703 -0.00897953402999654 – 0.000884127338494313 ## 2    bomppercent  -2.597078 -0.00567831104112229 – 0.000484155105742315 ## 3 Area_delta_R30 -10.235675  -0.0164492308704168 – -0.00402211882627686 ## 4         gender -83.222465    -0.170712996229106 – 0.00426806527981913 ## 5            age  -2.544554    -0.0103372952848458 – 0.0052481867268659 ##      P_value    P_adjust ## 1 0.10460587 0.130757338 ## 2 0.09591003 0.130757338 ## 3 0.00197737 0.009886849 ## 4 0.06160528 0.130757338 ## 5 0.51174413 0.511744134 testFeatures(cp_lowling, processedLowling, 1, \"Area_delta_R30\") # flip ## Joining with `by = join_by(subject, RFgroup)` ## Joining with `by = join_by(subject, age, gender)` ## [1] \"Positive loadings:\" ##      Area_delta_R30 ## [1,]     -0.5298343 ## [1] \"Negative loadings:\" ##      Area_delta_R30 ## [1,]      0.5298343 a = processedLowling$mode1 %>%   mutate(Component_1 = cp_lowling$Fac[[1]][,1]) %>%   left_join(rf_data %>% select(subject,day,Area_delta_R30,plaquepercent,bomppercent) %>% filter(day==14), by=\"subject\") %>%   ggplot(aes(x=Area_delta_R30,y=Component_1)) +   geom_point() +   xlab(\"RF%\") +   ylab(\"Loading\") +   stat_cor() +   theme(text=element_text(size=16))  b = plotFeatures(processedLowling$mode2, cp_lowling, 1, flip=TRUE) + scale_fill_manual(values=phylum_colors[-7]) + theme(legend.position=\"none\")  c = processedLowling$mode3 %>%   mutate(Component_1 = cp_lowling$Fac[[3]][,1], day=c(-14,0,2,5,9,14,21)) %>%   ggplot(aes(x=day,y=Component_1)) +   annotate(geom = \"rect\", xmin = 0, xmax = 14, ymin = -Inf, ymax = Inf, fill = \"red\", colour = \"black\", alpha=0.25) +   geom_line() +   geom_point() +   xlab(\"Time point [days]\") +   ylab(\"Loading\") +   ylim(0,1) +   theme(legend.position=\"none\", text=element_text(size=16))  a b c"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/TIFN2.html","id":"lower-jaw-interproximal-microbiome","dir":"Articles","previous_headings":"","what":"Lower jaw interproximal microbiome","title":"TIFN2","text":"","code":"testMetadata(cp_lowinter, 1, processedLowinter) ##             Term    Estimate                                          CI ## 1  plaquepercent  -2.8231325  -0.00885260016583814 – 0.00320633515325942 ## 2    bomppercent  -3.6808351 -0.00744783286106304 – 8.61626701053834e-05 ## 3 Area_delta_R30  -0.6104507  -0.00820690677640243 – 0.00698600534263869 ## 4         gender -24.7799778     -0.131742556135758 – 0.0821826004540417 ## 5            age  -3.2188894   -0.0127459966584142 – 0.00630821784418125 ##      P_value  P_adjust ## 1 0.34835493 0.8013102 ## 2 0.05517984 0.2758992 ## 3 0.87134707 0.8713471 ## 4 0.64104814 0.8013102 ## 5 0.49729155 0.8013102 testMetadata(cp_lowinter, 2, processedLowinter) ##             Term  Estimate                                           CI ## 1  plaquepercent  2.156444    -0.00382845328747255 – 0.0081413416846705 ## 2    bomppercent -4.091747 -0.00783089859963512 – -0.000352594798941325 ## 3 Area_delta_R30  7.257480   -0.000282823087328943 – 0.0147977821470906 ## 4         gender 74.027343        -0.032144561763505 – 0.18019924770268 ## 5            age  5.422361     -0.0040343211065686 – 0.0148790435409806 ##      P_value  P_adjust ## 1 0.46935734 0.4693573 ## 2 0.03287750 0.1468343 ## 3 0.05873372 0.1468343 ## 4 0.16576694 0.2762782 ## 5 0.25228070 0.3153509 testFeatures(cp_lowinter, processedLowinter, 2, \"bomppercent\") # no flip ## Joining with `by = join_by(subject, RFgroup)` ## Joining with `by = join_by(subject, age, gender)` ## [1] \"Positive loadings:\" ##      bomppercent ## [1,]   0.2341633 ## [1] \"Negative loadings:\" ##      bomppercent ## [1,]  -0.2341633 a = processedLowinter$mode1 %>%   mutate(Component_1 = cp_lowinter$Fac[[1]][,2]) %>%   left_join(rf_data %>% select(subject,day,Area_delta_R30,plaquepercent,bomppercent) %>% filter(day==14), by=\"subject\") %>%   ggplot(aes(x=bomppercent,y=Component_1)) +   geom_point() +   xlab(\"BOMP%\") +   ylab(\"Loading\") +   stat_cor() +   theme(text=element_text(size=16))  b = plotFeatures(processedLowinter$mode2, cp_lowinter, 2, flip=FALSE) + scale_fill_manual(values=phylum_colors[-c(3)]) + theme(legend.position=\"none\")  c = processedLowinter$mode3 %>%   mutate(Component_1 = -1*cp_lowinter$Fac[[3]][,2], day=c(-14,0,2,5,9,14,21)) %>%   ggplot(aes(x=day,y=Component_1)) +   annotate(geom = \"rect\", xmin = 0, xmax = 14, ymin = -Inf, ymax = Inf, fill = \"red\", colour = \"black\", alpha=0.25) +   geom_line() +   geom_point() +   xlab(\"Time point [days]\") +   ylab(\"Loading\") +   ylim(0,1) +   theme(legend.position=\"none\", text=element_text(size=16))  a b c"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/TIFN2.html","id":"upper-jaw-lingual-microbiome","dir":"Articles","previous_headings":"","what":"Upper jaw lingual microbiome","title":"TIFN2","text":"","code":"testMetadata(cp_upling, 1, processedUpling) ##             Term   Estimate                                          CI ## 1  plaquepercent  3.5957413  -0.00193167844376722 – 0.00912316112826477 ## 2    bomppercent  2.5813448 -0.000871991211114323 – 0.00603468087307641 ## 3 Area_delta_R30  7.9435166   0.000979584806484587 – 0.0149074483917542 ## 4         gender 78.4426156     -0.0196136482063289 – 0.176498879470703 ## 5            age -0.4196712  -0.00915349714410007 – 0.00831415476076494 ##      P_value  P_adjust ## 1 0.19519152 0.2439894 ## 2 0.13812418 0.2302070 ## 3 0.02655809 0.1327905 ## 4 0.11334141 0.2302070 ## 5 0.92284676 0.9228468 testMetadata(cp_upling, 2, processedUpling) ##             Term    Estimate                                          CI ## 1  plaquepercent  -2.5436852   -0.0086495593078846 – 0.00356218888854485 ## 2    bomppercent  -0.1702389   -0.0039849726780106 – 0.00364449492465157 ## 3 Area_delta_R30  -8.1288343 -0.0158215539877252 – -0.000436114704840301 ## 4         gender -85.1621897     -0.193480215958621 – 0.0231558365641216 ## 5            age  -0.6466179   -0.0102944542293067 – 0.00900121851702191 ##      P_value  P_adjust ## 1 0.40344530 0.6724088 ## 2 0.92832935 0.9283294 ## 3 0.03895533 0.1947767 ## 4 0.11945334 0.2986333 ## 5 0.89255185 0.9283294 testFeatures(cp_upling, processedUpling, 2, \"Area_delta_R30\") # flip ## Joining with `by = join_by(subject, RFgroup)` ## Joining with `by = join_by(subject, age, gender)` ## [1] \"Positive loadings:\" ##      Area_delta_R30 ## [1,]     -0.3280193 ## [1] \"Negative loadings:\" ##      Area_delta_R30 ## [1,]      0.3280193 a = processedUpling$mode1 %>%   mutate(Component_1 = cp_upling$Fac[[1]][,2]) %>%   left_join(rf_data %>% select(subject,day,Area_delta_R30,plaquepercent,bomppercent) %>% filter(day==14), by=\"subject\") %>%   ggplot(aes(x=Area_delta_R30,y=Component_1)) +   geom_point() +   xlab(\"RF%\") +   ylab(\"Loading\") +   stat_cor() +   theme(text=element_text(size=16))  b = plotFeatures(processedUpling$mode2, cp_upling, 2, flip=TRUE) + scale_fill_manual(values=phylum_colors[-c(3,7)]) + theme(legend.position=\"none\")  c = processedUpling$mode3 %>%   mutate(Component_1 = cp_upling$Fac[[3]][,2], day=c(-14,0,2,5,9,14,21)) %>%   ggplot(aes(x=day,y=Component_1)) +   annotate(geom = \"rect\", xmin = 0, xmax = 14, ymin = -Inf, ymax = Inf, fill = \"red\", colour = \"black\", alpha=0.25) +   geom_line() +   geom_point() +   xlab(\"Time point [days]\") +   ylab(\"Loading\") +   ylim(0,1) +   theme(legend.position=\"none\", text=element_text(size=16))  a b c"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/TIFN2.html","id":"upper-jaw-interproximal-microbiome","dir":"Articles","previous_headings":"","what":"Upper jaw interproximal microbiome","title":"TIFN2","text":"","code":"testMetadata(cp_upinter, 1, processedUpinter) ##             Term    Estimate                                         CI ## 1  plaquepercent   2.1326839 -0.00328755891087678 – 0.00755292666044199 ## 2    bomppercent   3.7419573 0.000355581649636956 – 0.00712833294888875 ## 3 Area_delta_R30   6.3702807  -0.000458619993549555 – 0.013199181483497 ## 4         gender 114.7064044     0.0185514573648732 – 0.210861351396827 ## 5            age  -0.6618349 -0.00922631147351948 – 0.00790264161581984 ##      P_value   P_adjust ## 1 0.42980563 0.53725704 ## 2 0.03130954 0.07827386 ## 3 0.06654502 0.11090837 ## 4 0.02076356 0.07827386 ## 5 0.87624079 0.87624079 testMetadata(cp_upinter, 2, processedUpinter) ##             Term   Estimate                                         CI ## 1  plaquepercent -2.4316053 -0.00867251409160288 – 0.00380930341158905 ## 2    bomppercent  2.7501722 -0.00114892641938689 – 0.00664927091740296 ## 3 Area_delta_R30 -0.9668053  -0.0088296535710741 – 0.00689604288502859 ## 4         gender 30.5288503    -0.0801846866985154 – 0.141242387353944 ## 5            age -7.7000402  -0.0175612435880203 – 0.00216116322441363 ##     P_value  P_adjust ## 1 0.4342843 0.7238072 ## 2 0.1610410 0.4026024 ## 3 0.8043410 0.8043410 ## 4 0.5791848 0.7239810 ## 5 0.1219174 0.4026024 testFeatures(cp_upinter, processedUpinter, 1, \"bomppercent\") # flip ## Joining with `by = join_by(subject, RFgroup)` ## Joining with `by = join_by(subject, age, gender)` ## [1] \"Positive loadings:\" ##      bomppercent ## [1,]  -0.4565796 ## [1] \"Negative loadings:\" ##      bomppercent ## [1,]   0.4565796 testFeatures(cp_upinter, processedUpinter, 1, \"gender\") # flip ## Joining with `by = join_by(subject, RFgroup)` ## Joining with `by = join_by(subject, age, gender)` ## [1] \"Positive loadings:\" ##          gender ## [1,] -0.2166038 ## [1] \"Negative loadings:\" ##         gender ## [1,] 0.2166038 a = processedUpinter$mode1 %>%   mutate(Component_1 = cp_upinter$Fac[[1]][,1]) %>%   left_join(rf_data %>% select(subject,day,Area_delta_R30,plaquepercent,bomppercent) %>% filter(day==14), by=\"subject\") %>%   ggplot(aes(x=bomppercent,y=Component_1)) +   geom_point() +   xlab(\"BOMP%\") +   ylab(\"Loading\") +   stat_cor() +   theme(text=element_text(size=16))  b = plotFeatures(processedUpinter$mode2, cp_upinter, 1, flip=TRUE) + scale_fill_manual(values=phylum_colors[-c(3,7)]) + theme(legend.position=\"none\")  c = processedUpinter$mode3 %>%   mutate(Component_1 = -1*cp_upinter$Fac[[3]][,1], day=c(-14,0,2,5,9,14,21)) %>%   ggplot(aes(x=day,y=Component_1)) +   annotate(geom = \"rect\", xmin = 0, xmax = 14, ymin = -Inf, ymax = Inf, fill = \"red\", colour = \"black\", alpha=0.25) +   geom_line() +   geom_point() +   xlab(\"Time point [days]\") +   ylab(\"Loading\") +   ylim(0,1) +   theme(legend.position=\"none\", text=element_text(size=16))  a b c"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/TIFN2.html","id":"salivary-microbiome","dir":"Articles","previous_headings":"","what":"Salivary microbiome","title":"TIFN2","text":"","code":"testMetadata(cp_saliva, 1, processedSaliva) ##             Term   Estimate                                         CI ## 1  plaquepercent   2.410738 -0.00355831149506644 – 0.00837978682976563 ## 2    bomppercent  -2.504120 -0.00623337039896853 – 0.00122513045951894 ## 3 Area_delta_R30  -5.519053  -0.0130393880948642 – 0.00200128290288186 ## 4         gender -86.946657    -0.192837413136006 – 0.0189440987425446 ## 5            age  -7.035609  -0.0164672494454233 – 0.00239603161672677 ##     P_value  P_adjust ## 1 0.4178187 0.4178187 ## 2 0.1815319 0.2269149 ## 3 0.1452174 0.2269149 ## 4 0.1044564 0.2269149 ## 5 0.1389100 0.2269149 testMetadata(cp_saliva, 2, processedSaliva) ##             Term   Estimate                                         CI ## 1  plaquepercent   4.868327 -0.000666119508513777 – 0.0104027729980185 ## 2    bomppercent   1.049513 -0.00240821269203614 – 0.00450723916772543 ## 3 Area_delta_R30   5.576203  -0.00139658153889448 – 0.0125489871748319 ## 4         gender  59.330741    -0.0388501724466451 – 0.157511653873589 ## 5            age -11.908698 -0.0206536259300458 – -0.00316376911062791 ##      P_value  P_adjust ## 1 0.08280442 0.1890952 ## 2 0.54175458 0.5417546 ## 3 0.11345712 0.1890952 ## 4 0.22808875 0.2851109 ## 5 0.00903208 0.0451604 testFeatures(cp_saliva, processedSaliva, 2, \"age\") # no flip ## Joining with `by = join_by(subject, RFgroup)` ## Joining with `by = join_by(subject, age, gender)` ## [1] \"Positive loadings:\" ##            age ## [1,] 0.3592963 ## [1] \"Negative loadings:\" ##             age ## [1,] -0.3592963 a = processedSaliva$mode1 %>%   mutate(Component_1 = cp_saliva$Fac[[1]][,2]) %>%   left_join(rf_data %>% select(subject,day,Area_delta_R30,plaquepercent,bomppercent) %>% filter(day==14), by=\"subject\") %>%   ggplot(aes(x=age,y=Component_1)) +   geom_point() +   xlab(\"Age\") +   ylab(\"Loading\") +   stat_cor() +   theme(text=element_text(size=16))  b = plotFeatures(processedSaliva$mode2, cp_saliva, 2, flip=FALSE) + scale_fill_manual(values=phylum_colors[-c(7)]) + theme(legend.position=\"none\")  c = processedSaliva$mode3 %>%   mutate(Component_1 = -1*cp_saliva$Fac[[3]][,2], day=c(-14,0,2,5,9,14,21)) %>%   ggplot(aes(x=day,y=Component_1)) +   annotate(geom = \"rect\", xmin = 0, xmax = 14, ymin = -Inf, ymax = Inf, fill = \"red\", colour = \"black\", alpha=0.25) +   geom_line() +   geom_point() +   xlab(\"Time point [days]\") +   ylab(\"Loading\") +   ylim(0,1) +   theme(legend.position=\"none\", text=element_text(size=16))  a b c"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/TIFN2.html","id":"salivary-metabolomics","dir":"Articles","previous_headings":"","what":"Salivary metabolomics","title":"TIFN2","text":"","code":"testMetadata(cp_metabolomics, 1, processedMetabolomics) ##             Term   Estimate                                         CI ## 1  plaquepercent   4.340779  -0.00177252492396623 – 0.0104540835526603 ## 2    bomppercent   1.782998 -0.00195667074036764 – 0.00552266679650121 ## 3 Area_delta_R30   3.973073  -0.00357131688284603 – 0.0115174629081315 ## 4         gender -35.447349    -0.141829531868009 – 0.0709348329387957 ## 5            age  -7.356789  -0.0168151275419762 – 0.00210155014536747 ##     P_value  P_adjust ## 1 0.1581698 0.3954244 ## 2 0.3394212 0.4242765 ## 3 0.2920535 0.4242765 ## 4 0.5028867 0.5028867 ## 5 0.1232062 0.3954244"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/vanderPloeg2024.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"vanderPloeg2024","text":"vignette PARAFAC model created upper jaw lingual data vanderPloeg2024 study. done first processing count data. Subsequently, appropriate number components determined. PARAFAC model created visualized.","code":"library(parafac4microbiome) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(ggpubr)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/vanderPloeg2024.html","id":"processing-the-data-cube","dir":"Articles","previous_headings":"","what":"Processing the data cube","title":"vanderPloeg2024","text":"data cube vanderPloeg2024$upper_jaw_lingual$data contains unprocessed counts. function processDataCube() performs processing counts following steps: performs feature selection based sparsityThreshold setting. Sparsity defined fraction samples microbial abundance (ASV/OTU otherwise) zero. vanderPloeg2024 can take RFgroups groups account feature selection. calculating sparsity feature subject group compare sparsity threshold set. feature passes threshold either group, selected. performs centered log-ratio transformation sample using compositions::clr() function pseudo-count one (features, prior selection based sparsity). centers scales three-way array. complex subject, refer paper Rasmus Bro Age Smilde. centering across subject mode, make subjects comparable within time point. Scaling within feature mode avoids PARAFAC model focusing features abnormally high variation. outcome processing new version dataset called processedPloeg. Please refer documentation processDataCube() information.","code":"processedPloeg = processDataCube(vanderPloeg2024$upper_jaw_lingual, sparsityThreshold=0.50, considerGroups=TRUE, groupVariable=\"RFgroup\", CLR=TRUE, centerMode=1, scaleMode=2)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/vanderPloeg2024.html","id":"determining-the-correct-number-of-components","dir":"Articles","previous_headings":"","what":"Determining the correct number of components","title":"vanderPloeg2024","text":"critical aspect PARAFAC modelling determine correct number components. developed functions assessModelQuality() assessModelStability() purpose. First, assess model quality specify minimum maximum number components investigate number randomly initialized models try number components. Note: vignette reflects minimum working example analyzing dataset due computational limitations automatic vignette rendering. Hence, look 1-3 components 5 random initializations . settings ideal real datasets. Please refer documentation assessModelQuality() information. overview plot showcases number iterations, sum--squared error, CORCONDIA variance explained 1-3 components. seems clear-cut case two-component model, three-component models CORCONDIA near zero. maximum amount variation can describe ~20%. skip stability assessment since appropriate number components clearly two.","code":"# Setup # For computational purposes we deviate from the default settings minNumComponents = 1 maxNumComponents = 3 numRepetitions = 3 # number of randomly initialized models numFolds = 5 # number of jack-knifed models ctol = 1e-5 maxit = 200 numCores = 1  colourCols = c(\"RFgroup\", \"Phylum\", \"\") legendTitles = c(\"RF group\", \"Phylum\", \"\") xLabels = c(\"Subject index\", \"Feature index\", \"Time index\") legendColNums = c(3,5,0) arrangeModes = c(TRUE, TRUE, FALSE) continuousModes = c(FALSE,FALSE,TRUE)  # Assess the metrics to determine the correct number of components qualityAssessment = assessModelQuality(processedPloeg$data, minNumComponents, maxNumComponents, numRepetitions, ctol=ctol, maxit=maxit, numCores=numCores) qualityAssessment$plots$overview"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/vanderPloeg2024.html","id":"model-selection","dir":"Articles","previous_headings":"","what":"Model selection","title":"vanderPloeg2024","text":"decided two-component model appropriate vanderPloeg2024 dataset. can now select one random initializations assessModelQuality() output final model. ’re going select random initialization corresponded maximum amount variation explained two components. Finally, visualize model using plotPARAFACmodel().  observe loadings modes components negative. due sign flipping: two modes negative loadings cancel describe thing two positive loadings. flipLoadings() function automatically performs procedure also sorts components much variation describe.","code":"numComponents = 2 modelChoice = which(qualityAssessment$metrics$varExp[,numComponents] == max(qualityAssessment$metrics$varExp[,numComponents])) finalModel = qualityAssessment$models[[numComponents]][[modelChoice]] plotPARAFACmodel(finalModel$Fac, processedPloeg, 2, colourCols, legendTitles, xLabels, legendColNums, arrangeModes, continuousModes,   overallTitle = \"vanderPloeg2024 PARAFAC model\") finalModel = flipLoadings(finalModel, processedPloeg$data)  plotPARAFACmodel(finalModel$Fac, processedPloeg, 2, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,   continuousModes = c(FALSE,FALSE,TRUE),   overallTitle = \"Ploeg PARAFAC model\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Geert Roelof van der Ploeg. Author, maintainer. Johan Westerhuis. Contributor. Anna Heintz-Buschart. Contributor. Age Smilde. Contributor. University Amsterdam. Copyright holder, funder.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"van der Ploeg G (2025). parafac4microbiome: Parallel Factor Analysis Modelling Longitudinal Microbiome Data. R package version 1.3.2.9000, https://grvanderploeg.com/parafac4microbiome/.","code":"@Manual{,   title = {parafac4microbiome: Parallel Factor Analysis Modelling of Longitudinal Microbiome Data},   author = {Geert Roelof {van der Ploeg}},   year = {2025},   note = {R package version 1.3.2.9000},   url = {https://grvanderploeg.com/parafac4microbiome/}, }"},{"path":[]},{"path":"https://grvanderploeg.github.io/parafac4microbiome/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Parallel Factor Analysis Modelling of Longitudinal Microbiome Data","text":"parafac4microbiome package enables R users easy way create Parallel Factor Analysis (PARAFAC) models longitudinal microbiome data. processDataCube() can used process microbiome count data appropriately multi-way data array. parafac() allows user create Parallel Factor Analysis model multi-way data array. assessModelQuality() helps user select appropriate number components randomly initializing many PARAFAC models inspecting various metrics interest. assessModelStability() helps user select appropriate number components bootstrapping jack-knifing samples inspecting model outcome similar. plotPARAFACmodel() helps visually inspect PARAFAC model. package also comes three example datasets. Fujita2023: -vitro experiment ocean inocula peptide medium, sampled every day 110 days (doi:10.1186/s40168-023-01474-5). Shao2019: large cohort dataset vaginally caesarean-section born infants London (doi:10.1038/s41586-019-1560-1). vanderPloeg2024: small gingivitis intervention dataset response groups (doi:10.1101/2024.03.18.585469).","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Parallel Factor Analysis Modelling of Longitudinal Microbiome Data","text":"basic introduction package given vignette(\"Introduction\") modelling example datasets elaborated respective vignettes vignette(\"Fujita2023\"), vignette(\"Shao2019\") vignette(\"vanderPloeg2024\"). vignettes function documentation can found .","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Parallel Factor Analysis Modelling of Longitudinal Microbiome Data","text":"parafac4microbiome package can installed CRAN using:","code":"install.packages(\"parafac4microbiome\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/index.html","id":"development-version","dir":"","previous_headings":"","what":"Development version","title":"Parallel Factor Analysis Modelling of Longitudinal Microbiome Data","text":"can install development version parafac4microbiome GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"GRvanderPloeg/parafac4microbiome\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Parallel Factor Analysis Modelling of Longitudinal Microbiome Data","text":"Please use following citation using package: van der Ploeg, G. R., Westerhuis, J., Heintz-Buschart, ., & Smilde, . (2025). parafac4microbiome: Exploratory analysis longitudinal microbiome data using Parallel Factor Analysis. mSystems 10:e00472-25. https://doi.org/10.1128/msystems.00472-25","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Parallel Factor Analysis Modelling of Longitudinal Microbiome Data","text":"","code":"library(parafac4microbiome) set.seed(123)  # Process the data cube processedFujita = processDataCube(Fujita2023,                                   sparsityThreshold=0.99,                                   CLR=TRUE,                                   centerMode=1,                                   scaleMode=2)  # Make a PARAFAC model model = parafac(processedFujita$data, nfac=3, nstart=10, output=\"best\")  # Sign flip components to make figure interpretable and comparable to the paper. # This has no effect on the model or the fit. model$Fac[[1]][,2] = -1 * model$Fac[[1]][,2] # sign flip mode 1 component 2 model$Fac[[2]][,1] = -1 * model$Fac[[2]][,1] # sign flip mode 2 component 1 model$Fac[[2]][,3] = -1 * model$Fac[[2]][,3] # sign flip mode 2 component 3 model$Fac[[3]] = -1 * model$Fac[[3]]         # sign flip all of mode 3  # Plot the PARAFAC model using some metadata plotPARAFACmodel(model$Fac, processedFujita,                  numComponents = 3,                  colourCols = c(\"\", \"Genus\", \"\"),                  legendTitles = c(\"\", \"Genus\", \"\"),                  xLabels = c(\"Replicate\", \"Feature index\", \"Time point\"),                  legendColNums = c(0,5,0),                  arrangeModes = c(FALSE, TRUE, FALSE),                  continuousModes = c(FALSE,FALSE,TRUE),                  overallTitle = \"Fujita PARAFAC model\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Parallel Factor Analysis Modelling of Longitudinal Microbiome Data","text":"encounter unexpected error clear bug, please file issue minimal reproducible example Github. questions types feedback, feel free send email.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/Fujita2023.html","id":null,"dir":"Reference","previous_headings":"","what":"Fujita2023 longitudinal microbiome data — Fujita2023","title":"Fujita2023 longitudinal microbiome data — Fujita2023","text":"Fujita2023 longitudinal microbiome dataset three-dimensional array, replicates mode 1, microbial abundances mode 2 time mode 3.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/Fujita2023.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fujita2023 longitudinal microbiome data — Fujita2023","text":"","code":"Fujita2023"},{"path":[]},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/Fujita2023.html","id":"fujita-","dir":"Reference","previous_headings":"","what":"Fujita2023","title":"Fujita2023 longitudinal microbiome data — Fujita2023","text":"list object three elements: data Array object data cube mode1 Dataframe subject metadata, ordered rows data cube. mode2 Taxonomic classification microbiota, ordered columns data cube. mode3 Dataframe time metadata, ordered third dimension array.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/Fujita2023.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Fujita2023 longitudinal microbiome data — Fujita2023","text":"doi:10.1186/s40168-023-01474-5","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/Shao2019.html","id":null,"dir":"Reference","previous_headings":"","what":"Shao2019 longitudinal microbiome data — Shao2019","title":"Shao2019 longitudinal microbiome data — Shao2019","text":"Shao2019 longitudinal microbiome dataset three-dimensional array, subjects mode 1, microbial abundances mode 2 time mode 3. Note: time points 4, 7, 21 Infancy used. Note: -zero microbial abundances removed save disk space.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/Shao2019.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shao2019 longitudinal microbiome data — Shao2019","text":"","code":"Shao2019"},{"path":[]},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/Shao2019.html","id":"shao-","dir":"Reference","previous_headings":"","what":"Shao2019","title":"Shao2019 longitudinal microbiome data — Shao2019","text":"list object three elements: data Array object data cube mode1 Dataframe subject metadata, ordered rows data cube. mode2 Taxonomic classification microbiota, ordered columns data cube. mode3 Dataframe time metadata, ordered third dimension array.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/Shao2019.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Shao2019 longitudinal microbiome data — Shao2019","text":"doi:10.1038/s41586-019-1560-1","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/assessModelQuality.html","id":null,"dir":"Reference","previous_headings":"","what":"Create randomly initialized models to determine the correct number of components by assessing model quality metrics. — assessModelQuality","title":"Create randomly initialized models to determine the correct number of components by assessing model quality metrics. — assessModelQuality","text":"Create randomly initialized models determine correct number components assessing model quality metrics.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/assessModelQuality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create randomly initialized models to determine the correct number of components by assessing model quality metrics. — assessModelQuality","text":"","code":"assessModelQuality(   X,   minNumComponents = 1,   maxNumComponents = 5,   numRepetitions = 100,   ctol = 1e-04,   maxit = 500,   numCores = 1 )"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/assessModelQuality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create randomly initialized models to determine the correct number of components by assessing model quality metrics. — assessModelQuality","text":"X Input data minNumComponents Minimum number components (default 1). maxNumComponents Maximum number components (default 5). numRepetitions Number randomly initialized models create (default 100). ctol Relative change loss tolerated call algorithm converged ALS case (default 1e-4). maxit Maximum number iterations allowed without convergence (default 500). numCores Number cores use. set larger 1, run job parallel (default 1)","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/assessModelQuality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create randomly initialized models to determine the correct number of components by assessing model quality metrics. — assessModelQuality","text":"list object following: plots: Plots assessed metrics overview plot showing summary . metrics: metrics every created model (number iterations, sum squared errors, CORCONDIA score variance explained). models: created models.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/assessModelQuality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create randomly initialized models to determine the correct number of components by assessing model quality metrics. — assessModelQuality","text":"","code":"X = Fujita2023$data  # Run assessModelQuality with less strict convergence parameters as example assessment = assessModelQuality(X,                                 minNumComponents=1,                                 maxNumComponents=3,                                 numRepetitions=5) assessment$plots$overview"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/assessModelStability.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapping procedure to determine PARAFAC model stability for a given number of components. — assessModelStability","title":"Bootstrapping procedure to determine PARAFAC model stability for a given number of components. — assessModelStability","text":"Bootstrapping procedure determine PARAFAC model stability given number components.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/assessModelStability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapping procedure to determine PARAFAC model stability for a given number of components. — assessModelStability","text":"","code":"assessModelStability(   dataset,   minNumComponents = 1,   maxNumComponents = 5,   numFolds = dim(dataset$data)[1],   considerGroups = FALSE,   groupVariable = \"\",   colourCols = NULL,   legendTitles = NULL,   xLabels = NULL,   legendColNums = NULL,   arrangeModes = NULL,   maxit = 500,   ctol = 1e-04,   numCores = 1 )"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/assessModelStability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrapping procedure to determine PARAFAC model stability for a given number of components. — assessModelStability","text":"dataset See Fujita2023, Shao2019 vanderPloeg2024. minNumComponents Minimum number components (default 1). maxNumComponents Maximum number components (default 5). numFolds Number bootstrapped models create. considerGroups Consider subject groups calculating sparsity (default FALSE) groupVariable Column name dataset$mode1 used consider groups (default \"\") colourCols Vector strings stating column names factorized colours per mode. legendTitles Vector strings stating legend title per mode. xLabels Vector strings stating x-axis labels per mode. legendColNums Vector integers stating desired number columns legends per mode. arrangeModes Vector boolean values per mode, stating loadings arranged according colourCols (TRUE) (FALSE). maxit Maximum number iterations allowed without convergence (default 500). ctol Relative change loss tolerated call algorithm converged ALS case (default 1e-4). numCores Number cores use. set larger 1, run job parallel (default 1)","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/assessModelStability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrapping procedure to determine PARAFAC model stability for a given number of components. — assessModelStability","text":"list containing following: models: stabilized sign-flipped bootstrapped PARAFAC models. modelPlots: list plots median model error bars number components. FMSplot: bar plot showing Factor Match Scores per number components (see Li et al., 2024). FMS: FMS values FMS plot based .","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/assessModelStability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrapping procedure to determine PARAFAC model stability for a given number of components. — assessModelStability","text":"","code":"processedFujita = processDataCube(Fujita2023, sparsityThreshold=0.99, centerMode=1, scaleMode=2) modelStability = assessModelStability(processedFujita,                                       minNumComponents=1,                                       maxNumComponents=2)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calcVarExpPerComponent.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the variance explained of a PARAFAC model, per component — calcVarExpPerComponent","title":"Calculate the variance explained of a PARAFAC model, per component — calcVarExpPerComponent","text":"Calculate variance explained PARAFAC model, per component","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calcVarExpPerComponent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the variance explained of a PARAFAC model, per component — calcVarExpPerComponent","text":"","code":"calcVarExpPerComponent(Fac, X)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calcVarExpPerComponent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the variance explained of a PARAFAC model, per component — calcVarExpPerComponent","text":"Fac Fac object output model X Input dataset","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calcVarExpPerComponent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the variance explained of a PARAFAC model, per component — calcVarExpPerComponent","text":"Vector scalars percentage variation explained per component","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calcVarExpPerComponent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the variance explained of a PARAFAC model, per component — calcVarExpPerComponent","text":"","code":"X = array(rnorm(108*100*10), c(108,100,10)) model = parafac(X, 2) calcVarExpPerComponent(model$Fac, X) #> [1] 0.3680022 0.3748610"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateFMS.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Factor Match Score for all initialized models. — calculateFMS","title":"Calculate Factor Match Score for all initialized models. — calculateFMS","text":"Calculate Factor Match Score initialized models.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateFMS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Factor Match Score for all initialized models. — calculateFMS","text":"","code":"calculateFMS(models)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateFMS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Factor Match Score for all initialized models. — calculateFMS","text":"models Output parafac() using output=\"\".","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateFMS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Factor Match Score for all initialized models. — calculateFMS","text":"Vector containing FMS scores comparisons","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateFMS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Factor Match Score for all initialized models. — calculateFMS","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) X = reinflateTensor(A, B, C) models = parafac(X, 2, initialization=\"random\", nstart=10, maxit=2, output=\"all\") calculateFMS(models) #>  [1] 0.025461441 0.051886842 0.023800382 0.007717426 0.040055884 0.042772256 #>  [7] 0.084319630 0.090802289 0.024838915 0.034198819 0.039982563 0.048909237 #> [13] 0.046063679 0.063312176 0.035905995 0.031095529 0.026787061 0.050014313 #> [19] 0.036016638 0.023684890 0.042446021 0.053899948 0.031381054 0.015127195 #> [25] 0.052330629 0.014021322 0.015849344 0.050638957 0.041642001 0.028173094 #> [31] 0.029577363 0.058029880 0.012203774 0.023725391 0.052249522 0.008829398 #> [37] 0.017972498 0.035585396 0.035183596 0.028134644 0.021513035 0.023719843 #> [43] 0.031142829 0.016726202 0.038221313"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateSparsity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate sparsity across the feature mode of a multi-way array. — calculateSparsity","title":"Calculate sparsity across the feature mode of a multi-way array. — calculateSparsity","text":"Calculate sparsity across feature mode multi-way array.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateSparsity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate sparsity across the feature mode of a multi-way array. — calculateSparsity","text":"","code":"calculateSparsity(dataset, considerGroups = FALSE, groupVariable = \"\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateSparsity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate sparsity across the feature mode of a multi-way array. — calculateSparsity","text":"dataset See Fujita2023, Shao2019 vanderPloeg2024. considerGroups Consider subject groups calculating sparsity (default FALSE) groupVariable Column name dataset$mode1 used consider groups (default \"\")","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateSparsity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate sparsity across the feature mode of a multi-way array. — calculateSparsity","text":"Vector sparsity fractions (N x J) N number groups J number features.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateSparsity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate sparsity across the feature mode of a multi-way array. — calculateSparsity","text":"","code":"# No groups sparsity = calculateSparsity(Fujita2023) length(sparsity) #> [1] 28 hist(sparsity)   # Consider groups colnames(Shao2019$mode1) #> [1] \"Individual\"    \"Delivery_mode\" sparsity = calculateSparsity(Shao2019, considerGroups=TRUE, groupVariable=\"Delivery_mode\") dim(sparsity) #> [1]   2 959 hist(sparsity[1,])  hist(sparsity[2,])"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateVarExp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the variation explained by a PARAFAC model. — calculateVarExp","title":"Calculate the variation explained by a PARAFAC model. — calculateVarExp","text":"Calculate variation explained PARAFAC model.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateVarExp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the variation explained by a PARAFAC model. — calculateVarExp","text":"","code":"calculateVarExp(Fac, X)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateVarExp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the variation explained by a PARAFAC model. — calculateVarExp","text":"Fac Fac object output parafac() function. X Input data PARAFAC model.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateVarExp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the variation explained by a PARAFAC model. — calculateVarExp","text":"variation explained model, expressed fraction (0-1).","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateVarExp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the variation explained by a PARAFAC model. — calculateVarExp","text":"","code":"X = Fujita2023$data model = parafac(X, nfac=1, nstart=1) calculateVarExp(model$Fac, X) #> [1] 0.7372697"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/corcondia.html","id":null,"dir":"Reference","previous_headings":"","what":"Core Consistency Diagnostic (CORCONDIA) calculation — corcondia","title":"Core Consistency Diagnostic (CORCONDIA) calculation — corcondia","text":"Core Consistency Diagnostic (CORCONDIA) calculation","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/corcondia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Core Consistency Diagnostic (CORCONDIA) calculation — corcondia","text":"","code":"corcondia(X, Fac)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/corcondia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Core Consistency Diagnostic (CORCONDIA) calculation — corcondia","text":"X Input data matrix Fac PARAFAC model Fac object","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/corcondia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Core Consistency Diagnostic (CORCONDIA) calculation — corcondia","text":"Scalar CORCONDIA value","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/corcondia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Core Consistency Diagnostic (CORCONDIA) calculation — corcondia","text":"","code":"X = Fujita2023$data model = parafac(X, 2) corcondia(X, model$Fac) #> [1] 38.36646"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/fac_to_vect.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorize Fac object — fac_to_vect","title":"Vectorize Fac object — fac_to_vect","text":"Vectorize Fac object","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/fac_to_vect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorize Fac object — fac_to_vect","text":"","code":"fac_to_vect(Fac)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/fac_to_vect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorize Fac object — fac_to_vect","text":"Fac Fac object output parafac.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/fac_to_vect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorize Fac object — fac_to_vect","text":"Vectorized Fac object","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/fac_to_vect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorize Fac object — fac_to_vect","text":"","code":"set.seed(123) A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) Fac = list(A, B, C) v = fac_to_vect(Fac)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/flipLoadings.html","id":null,"dir":"Reference","previous_headings":"","what":"Sign flip the loadings of many randomly initialized models to make consistent overview plots. — flipLoadings","title":"Sign flip the loadings of many randomly initialized models to make consistent overview plots. — flipLoadings","text":"Sign flip loadings many randomly initialized models make consistent overview plots.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/flipLoadings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sign flip the loadings of many randomly initialized models to make consistent overview plots. — flipLoadings","text":"","code":"flipLoadings(models, X)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/flipLoadings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sign flip the loadings of many randomly initialized models to make consistent overview plots. — flipLoadings","text":"models Output parafac. X Input dataset parafac modelling procedure.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/flipLoadings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sign flip the loadings of many randomly initialized models to make consistent overview plots. — flipLoadings","text":"models sign flipped components applicable.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/flipLoadings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sign flip the loadings of many randomly initialized models to make consistent overview plots. — flipLoadings","text":"","code":"A = array(rnorm(108*2), c(108,2)) B = array(rnorm(100*2), c(100,2)) C = array(rnorm(10*2), c(10,2)) X = reinflateTensor(A, B, C) models = parafac(X, 2, nstart=10, output=\"all\", sortComponents=TRUE) flippedModels = flipLoadings(models, X)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/importPhyloseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Phyloseq object for PARAFAC modelling — importPhyloseq","title":"Import Phyloseq object for PARAFAC modelling — importPhyloseq","text":"Import Phyloseq object PARAFAC modelling","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/importPhyloseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Phyloseq object for PARAFAC modelling — importPhyloseq","text":"","code":"importPhyloseq(phyloseqObject, subjectIDs, thirdMode)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/importPhyloseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Phyloseq object for PARAFAC modelling — importPhyloseq","text":"phyloseqObject Phyloseq object containing least otu table sample data, preferably also taxonomic information. subjectIDs Column name sam_data corresponding subject IDs. thirdMode Column name sam_data corresponding study design aspect put third mode data cube.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/importPhyloseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Phyloseq object for PARAFAC modelling — importPhyloseq","text":"List object containing: 'data': data cube 'mode1': metadata subject mode 'mode2': taxonomy information 'mode3': metadata third mode","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/importPhyloseq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import Phyloseq object for PARAFAC modelling — importPhyloseq","text":"","code":"library(phyloseq) data(GlobalPatterns) GP = GlobalPatterns  # Add custom subject IDs to the sample data to make this example work alteredSampleData = sample_data(GP) alteredSampleData$subjectID = c(1,2,3,1,2,1,2,3,1,2,1,2,1,2,3,1,2,3,1,2,3,4,5,1,2,3) df = phyloseq(otu_table(GP), tax_table(GP), alteredSampleData)  # Make a data cube with SampleType (soil, feces, etc.) as the third mode. result = importPhyloseq(df, subjectIDs = \"subjectID\", thirdMode=\"SampleType\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/importTreeSummarizedExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Import TreeSummarizedExperiment object for PARAFAC modelling — importTreeSummarizedExperiment","title":"Import TreeSummarizedExperiment object for PARAFAC modelling — importTreeSummarizedExperiment","text":"Import TreeSummarizedExperiment object PARAFAC modelling","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/importTreeSummarizedExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import TreeSummarizedExperiment object for PARAFAC modelling — importTreeSummarizedExperiment","text":"","code":"importTreeSummarizedExperiment(   treeObject,   subjectIDs,   thirdMode,   taxa_are_rows )"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/importTreeSummarizedExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import TreeSummarizedExperiment object for PARAFAC modelling — importTreeSummarizedExperiment","text":"treeObject TreeSummarizedExperiment object containing least OTU table sample information, preferably also taxonomic information. subjectIDs Column name sample information corresponding subject IDs. thirdMode Column name sample information corresponding study design aspect put third mode data cube. taxa_are_rows Boolean specifying taxa rows OTU table (TRUE) (FALSE).","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/importTreeSummarizedExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import TreeSummarizedExperiment object for PARAFAC modelling — importTreeSummarizedExperiment","text":"List object containing: 'data': data cube 'mode1': metadata subject mode 'mode2': taxonomy information 'mode3': metadata third mode","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/importTreeSummarizedExperiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import TreeSummarizedExperiment object for PARAFAC modelling — importTreeSummarizedExperiment","text":"","code":"library(TreeSummarizedExperiment) #> Loading required package: SingleCellExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #> Loading required package: generics #>  #> Attaching package: ‘generics’ #> The following objects are masked from ‘package:base’: #>  #>     as.difftime, as.factor, as.ordered, intersect, is.element, setdiff, #>     setequal, union #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, is.unsorted, lapply, #>     mapply, match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, #>     rank, rbind, rownames, sapply, saveRDS, table, tapply, unique, #>     unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #>  #> Attaching package: ‘IRanges’ #> The following object is masked from ‘package:phyloseq’: #>  #>     distance #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians #> The following object is masked from ‘package:phyloseq’: #>  #>     sampleNames #> Loading required package: Biostrings #> Loading required package: XVector #>  #> Attaching package: ‘Biostrings’ #> The following object is masked from ‘package:base’: #>  #>     strsplit  fakeOTU = t(rTensor::k_unfold(rTensor::as.tensor(Fujita2023$data), 2)@data) fakeTaxa = as.matrix(Fujita2023$mode2) fakeSam = as.data.frame(cbind(rep(1:8, 110), rep(1:110, each=8))) colnames(fakeSam) = c(\"replicate.id\", \"timepoint\")  fakeTreeObj = TreeSummarizedExperiment(assays = list(Count = fakeOTU),                                       rowData = fakeSam,                                       colData = fakeTaxa) dataset = importTreeSummarizedExperiment(fakeTreeObj,                                          subjectIDs=\"replicate.id\",                                          thirdMode=\"timepoint\",                                          taxa_are_rows=FALSE)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/initializePARAFAC.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize PARAFAC algorithm input vectors — initializePARAFAC","title":"Initialize PARAFAC algorithm input vectors — initializePARAFAC","text":"Initialize PARAFAC algorithm input vectors","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/initializePARAFAC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize PARAFAC algorithm input vectors — initializePARAFAC","text":"","code":"initializePARAFAC(Tensor, nfac, initialization = \"random\", output = \"Fac\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/initializePARAFAC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize PARAFAC algorithm input vectors — initializePARAFAC","text":"Tensor Input dataset matrix tensor nfac Number components initialize. initialization Either \"random\" random initialization \"svd\" svd based. output Output initialized components Fac object (\"Fac\", default) vector (\"vect\").","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/initializePARAFAC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize PARAFAC algorithm input vectors — initializePARAFAC","text":"Fac vector initialized components.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/initializePARAFAC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize PARAFAC algorithm input vectors — initializePARAFAC","text":"","code":"A = array(rnorm(108,2), c(108,2)) B = array(rnorm(100,2), c(100,2)) C = array(rnorm(10,2), c(10,2)) Tensor = reinflateTensor(A, B, C, returnAsTensor=TRUE) init = initializePARAFAC(Tensor, 2)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayCLR.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a centered log-ratio transform over a multi-way array — multiwayCLR","title":"Perform a centered log-ratio transform over a multi-way array — multiwayCLR","text":"Note: Propagates NAs corresponding missing samples.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayCLR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a centered log-ratio transform over a multi-way array — multiwayCLR","text":"","code":"multiwayCLR(X, pseudocount = 1)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayCLR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a centered log-ratio transform over a multi-way array — multiwayCLR","text":"X Multi-way array counts pseudocount Pseudocount value use (default 1).","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayCLR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a centered log-ratio transform over a multi-way array — multiwayCLR","text":"CLRed cube","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayCLR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a centered log-ratio transform over a multi-way array — multiwayCLR","text":"","code":"cubeCLR = multiwayCLR(Fujita2023$data)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayCenter.html","id":null,"dir":"Reference","previous_headings":"","what":"Center a multi-way array — multiwayCenter","title":"Center a multi-way array — multiwayCenter","text":"Center multi-way array","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayCenter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Center a multi-way array — multiwayCenter","text":"","code":"multiwayCenter(X, mode = 1)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayCenter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Center a multi-way array — multiwayCenter","text":"X Multi-way array mode Mode center across (default 1).","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayCenter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Center a multi-way array — multiwayCenter","text":"Centered multi-way array","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayCenter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Center a multi-way array — multiwayCenter","text":"","code":"cube_cnt = multiwayCenter(Fujita2023$data)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayScale.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale a multi-way array — multiwayScale","title":"Scale a multi-way array — multiwayScale","text":"Scale multi-way array","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayScale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale a multi-way array — multiwayScale","text":"","code":"multiwayScale(X, mode = 2)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayScale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale a multi-way array — multiwayScale","text":"X Multi-way array mode Mode scale within: 1=subjects,2=features,3=time (default 2).","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayScale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale a multi-way array — multiwayScale","text":"Scaled multi-way array","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayScale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale a multi-way array — multiwayScale","text":"","code":"cube_scl = multiwayCenter(Fujita2023$data)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel Factor Analysis — parafac","title":"Parallel Factor Analysis — parafac","text":"Parallel Factor Analysis","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel Factor Analysis — parafac","text":"","code":"parafac(   Tensor,   nfac,   nstart = 1,   maxit = 500,   ctol = 1e-04,   initialization = \"random\",   output = \"best\",   sortComponents = FALSE )"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel Factor Analysis — parafac","text":"Tensor 3-way matrix numeric data nfac Number factors (components) fit. nstart Number models randomly initialize (default 1). maxit Maximum number iterations allowed without convergence (default 500). ctol Relative change loss tolerated call algorithm converged ALS case (default 1e-4). initialization \"Random\" randomly initialized input vectors \"nvec\" svd-based best guess. output String (\"best\"/\"\") Return best model nstart models (\"best\") return list object (\"\"). sortComponents Boolean sort components based variance explained (default FALSE)","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel Factor Analysis — parafac","text":"List object PARAFAC model models.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parallel Factor Analysis — parafac","text":"","code":"X = array(rnorm(108*100*10), c(108,100,10)) model = parafac(X, 2)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac4microbiome-package.html","id":null,"dir":"Reference","previous_headings":"","what":"parafac4microbiome: Parallel Factor Analysis Modelling of Longitudinal Microbiome Data — parafac4microbiome-package","title":"parafac4microbiome: Parallel Factor Analysis Modelling of Longitudinal Microbiome Data — parafac4microbiome-package","text":"Creation selection PARAllel FACtor Analysis (PARAFAC) models longitudinal microbiome data. can import data import functions use one example datasets create PARAFAC models. Selection optimal number components can done using assessModelQuality() assessModelStability(). selected model can plotted using plotPARAFACmodel(). Parallel Factor Analysis method originally described Caroll Chang (1970) doi:10.1007/BF02310791  Harshman (1970) https://www.psychology.uwo.ca/faculty/harshman/wpppfac0.pdf.","code":""},{"path":[]},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac4microbiome-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"parafac4microbiome: Parallel Factor Analysis Modelling of Longitudinal Microbiome Data — parafac4microbiome-package","text":"Maintainer: Geert Roelof van der Ploeg g.r.ploeg@uva.nl (ORCID) contributors: Johan Westerhuis j..westerhuis@uva.nl (ORCID) [contributor] Anna Heintz-Buschart .u.s.heintzbuschart@uva.nl (ORCID) [contributor] Age Smilde .k.smilde@uva.nl (ORCID) [contributor] University Amsterdam [copyright holder, funder]","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac_core_als.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal PARAFAC alternating least-squares (ALS) core algorithm — parafac_core_als","title":"Internal PARAFAC alternating least-squares (ALS) core algorithm — parafac_core_als","text":"Internal PARAFAC alternating least-squares (ALS) core algorithm","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac_core_als.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal PARAFAC alternating least-squares (ALS) core algorithm — parafac_core_als","text":"","code":"parafac_core_als(Tensor, nfac, init, maxit = 500, ctol = 1e-04)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac_core_als.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal PARAFAC alternating least-squares (ALS) core algorithm — parafac_core_als","text":"Tensor Tensor data object nfac Number components compute init Initialization initializePARAFAC. maxit Maximum number iterations run (default 500). ctol Loss function tolerance convergence (default 1e-4)","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac_core_als.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal PARAFAC alternating least-squares (ALS) core algorithm — parafac_core_als","text":"List containing Fac object loss per iteration","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac_core_als.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal PARAFAC alternating least-squares (ALS) core algorithm — parafac_core_als","text":"","code":"A = array(rnorm(108*2), c(108,2)) B = array(rnorm(100*2), c(100,2)) C = array(rnorm(10*2), c(10,2)) Tensor = reinflateTensor(A, B, C) init = initializePARAFAC(Tensor, 2) model = parafac_core_als(Tensor, 2, init)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"PARAFAC loss function calculation — parafac_fun","title":"PARAFAC loss function calculation — parafac_fun","text":"PARAFAC loss function calculation","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PARAFAC loss function calculation — parafac_fun","text":"","code":"parafac_fun(x, Tensor, lambdas = NULL)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PARAFAC loss function calculation — parafac_fun","text":"x Vector fitted loadings generated PARAFAC algorithm, can also Fac object Tensor input data lambdas lambdas (kruskal tensor case) generated make Fac norm 1, can supplied.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PARAFAC loss function calculation — parafac_fun","text":"Scalar value loss function","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PARAFAC loss function calculation — parafac_fun","text":"","code":"A = array(rnorm(108*2), c(108,2)) B = array(rnorm(100*2), c(100,2)) C = array(rnorm(10*2), c(10,2)) X = reinflateTensor(A, B, C) model = parafac(X, 2) f = parafac_fun(model$Fac, X)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotModelMetric.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot diagnostics of many initialized PARAFAC models. — plotModelMetric","title":"Plot diagnostics of many initialized PARAFAC models. — plotModelMetric","text":"Plot diagnostics many initialized PARAFAC models.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotModelMetric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot diagnostics of many initialized PARAFAC models. — plotModelMetric","text":"","code":"plotModelMetric(   metric,   plottingMode = \"box\",   ylabel = \"metric\",   titleString = \"\" )"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotModelMetric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot diagnostics of many initialized PARAFAC models. — plotModelMetric","text":"metric Matrix metrics per initialized model (number models x number components). plottingMode Plot metrics box plot (\"box\", default) bar plot (\"bar\"). ylabel String y axis label (default \"metric\"). titleString String plot title (default \"\").","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotModelMetric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot diagnostics of many initialized PARAFAC models. — plotModelMetric","text":"plot metrics","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotModelMetric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot diagnostics of many initialized PARAFAC models. — plotModelMetric","text":"","code":"varExp = array(runif(100*2, min=50, max=100), c(100,2)) plotModelMetric(varExp, plottingMode=\"box\", ylabel=\"Variation explained (%)\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotModelStability.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a summary of the loadings of many initialized parafac models. — plotModelStability","title":"Plot a summary of the loadings of many initialized parafac models. — plotModelStability","text":"Plot summary loadings many initialized parafac models.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotModelStability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a summary of the loadings of many initialized parafac models. — plotModelStability","text":"","code":"plotModelStability(   models,   dataset,   colourCols = NULL,   legendTitles = NULL,   xLabels = NULL,   legendColNums = NULL,   arrangeModes = NULL,   continuousModes = NULL,   overallTitle = \"\" )"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotModelStability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a summary of the loadings of many initialized parafac models. — plotModelStability","text":"models Models list output parafac() using output=\"\". dataset longitudinal microbiome dataset, ideally processed processDataCube(), formatted follows: data Array object data cube mode1 Dataframe subject metadata, ordered rows data cube. mode2 Taxonomic classification microbiota, ordered columns data cube. mode3 Dataframe time metadata, ordered third dimension array. colourCols Vector strings stating column names factorized colours per mode. legendTitles Vector strings stating legend title per mode. xLabels Vector strings stating x-axis labels per mode. legendColNums Vector integers stating desired number columns legends per mode. arrangeModes Vector boolean values per mode, stating loadings arranged according colourCols (TRUE) (FALSE). continuousModes Vector boolean values per mode, stating loadings plotted line plot (TRUE) bar plot (FALSE). overallTitle Overall title plot.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotModelStability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a summary of the loadings of many initialized parafac models. — plotModelStability","text":"Plot loadings error bars","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotModelStability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a summary of the loadings of many initialized parafac models. — plotModelStability","text":"","code":"processedFujita = processDataCube(Fujita2023, sparsityThreshold=0.99, centerMode=1, scaleMode=2) models = parafac(processedFujita$data, 2, nstart=10, output=\"all\") plotModelStability(models, processedFujita)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotModelTCCs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots Tucker Congruence Coefficients of randomly initialized models. — plotModelTCCs","title":"Plots Tucker Congruence Coefficients of randomly initialized models. — plotModelTCCs","text":"Plots Tucker Congruence Coefficients randomly initialized models.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotModelTCCs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots Tucker Congruence Coefficients of randomly initialized models. — plotModelTCCs","text":"","code":"plotModelTCCs(models)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotModelTCCs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots Tucker Congruence Coefficients of randomly initialized models. — plotModelTCCs","text":"models Models list output parafac() using output=\"\".","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotModelTCCs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots Tucker Congruence Coefficients of randomly initialized models. — plotModelTCCs","text":"Plot TCCs","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotModelTCCs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots Tucker Congruence Coefficients of randomly initialized models. — plotModelTCCs","text":"","code":"processedFujita = processDataCube(Fujita2023, sparsityThreshold=0.99, centerMode=1, scaleMode=2) models = parafac(processedFujita$data, 3, nstart=10, output=\"all\") plotModelTCCs(models)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotPARAFACmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a PARAFAC model — plotPARAFACmodel","title":"Plot a PARAFAC model — plotPARAFACmodel","text":"Plot PARAFAC model","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotPARAFACmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a PARAFAC model — plotPARAFACmodel","text":"","code":"plotPARAFACmodel(   model,   dataset,   numComponents,   colourCols = NULL,   legendTitles = NULL,   xLabels = NULL,   legendColNums = NULL,   arrangeModes = NULL,   continuousModes = NULL,   overallTitle = \"\" )"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotPARAFACmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a PARAFAC model — plotPARAFACmodel","text":"model Model output parafac(). dataset longitudinal microbiome dataset, ideally processed processDataCube(), formatted follows: data Array object data cube mode1 Dataframe subject metadata, ordered rows data cube. mode2 Taxonomic classification microbiota, ordered columns data cube. mode3 Dataframe time metadata, ordered third dimension array. numComponents Number PARAFAC components model. colourCols Vector strings stating column names factorized colours per mode. legendTitles Vector strings stating legend title per mode. xLabels Vector strings stating x-axis labels per mode. legendColNums Vector integers stating desired number columns legends per mode. arrangeModes Vector boolean values per mode, stating loadings arranged according colourCols (TRUE) (FALSE). continuousModes Vector boolean values per mode, stating loadings plotted line plot (TRUE) bar plot (FALSE). overallTitle Overall title plot.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotPARAFACmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a PARAFAC model — plotPARAFACmodel","text":"Plot object","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotPARAFACmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a PARAFAC model — plotPARAFACmodel","text":"","code":"library(multiway) #> Loading required package: CMLS #> Loading required package: quadprog #> Loading required package: parallel #>  #> Attaching package: ‘multiway’ #> The following objects are masked from ‘package:parafac4microbiome’: #>  #>     corcondia, parafac library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:Biostrings’: #>  #>     collapse, intersect, setdiff, setequal, union #> The following object is masked from ‘package:XVector’: #>  #>     slice #> The following object is masked from ‘package:Biobase’: #>  #>     combine #> The following objects are masked from ‘package:GenomicRanges’: #>  #>     intersect, setdiff, union #> The following object is masked from ‘package:GenomeInfoDb’: #>  #>     intersect #> The following objects are masked from ‘package:IRanges’: #>  #>     collapse, desc, intersect, setdiff, slice, union #> The following objects are masked from ‘package:S4Vectors’: #>  #>     first, intersect, rename, setdiff, setequal, union #> The following objects are masked from ‘package:BiocGenerics’: #>  #>     combine, intersect, setdiff, setequal, union #> The following object is masked from ‘package:generics’: #>  #>     explain #> The following object is masked from ‘package:matrixStats’: #>  #>     count #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2) set.seed(0)  # Process the data processedFujita = processDataCube(Fujita2023, sparsityThreshold=0.9, centerMode=1, scaleMode=2)  # Make PARAFAC model model = parafac(processedFujita$data, nfac=2, nstart=10, verbose=FALSE)  # Make plot plotPARAFACmodel(model, processedFujita,   numComponents = 2,   colourCols = c(\"\", \"Genus\", \"\"),   legendTitles = c(\"\", \"Genus\", \"\"),   xLabels = c(\"Replicate\", \"Feature index\", \"Time point\"),   legendColNums = c(0,5,0),   arrangeModes = c(FALSE, TRUE, FALSE),   continuousModes = c(FALSE,FALSE,TRUE),   overallTitle = \"Fujita PARAFAC model\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/processDataCube.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a multi-way array of count data. — processDataCube","title":"Process a multi-way array of count data. — processDataCube","text":"Process multi-way array count data.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/processDataCube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a multi-way array of count data. — processDataCube","text":"","code":"processDataCube(   dataset,   sparsityThreshold = 1,   considerGroups = FALSE,   groupVariable = \"\",   CLR = TRUE,   centerMode = 0,   scaleMode = 0 )"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/processDataCube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a multi-way array of count data. — processDataCube","text":"dataset longitudinal microbiome dataset, formatted follows: data Array object data cube filled counts mode1 Dataframe subject metadata, ordered rows data cube. mode2 Taxonomic classification microbiota, ordered columns data cube. mode3 Dataframe time metadata, ordered third dimension array. See Fujita2023, Shao2019 vanderPloeg2024 information. sparsityThreshold Maximum sparsity feature selected (default=1, .e. select features). considerGroups Consider groups calculating sparsity (default=FALSE). groupVariable Column name dataset$mode1 used consider groups (default=\"\"). CLR Perform centered log-ratio transformation count data (default=TRUE). centerMode Mode center across: 1=subjects,2=features,3=time (default 0, .e. center). See multiwayCenter() information. scaleMode Mode scale within: 1=subjects,2=features,3=time (default 0, .e. scale). See multiwayScale() information.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/processDataCube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a multi-way array of count data. — processDataCube","text":"CLRed, centered scaled cube","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/processDataCube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process a multi-way array of count data. — processDataCube","text":"","code":"processedCube = processDataCube(Fujita2023)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/reinflateFac.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Xhat from a model Fac object — reinflateFac","title":"Calculate Xhat from a model Fac object — reinflateFac","text":"Calculate Xhat model Fac object","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/reinflateFac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Xhat from a model Fac object — reinflateFac","text":"","code":"reinflateFac(Fac, X, returnAsTensor = FALSE)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/reinflateFac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Xhat from a model Fac object — reinflateFac","text":"Fac Fac object parafac X Input data X returnAsTensor Boolean return Xhat rTensor tensor (TRUE) matrix (default, FALSE).","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/reinflateFac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Xhat from a model Fac object — reinflateFac","text":"Xhat","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/reinflateFac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Xhat from a model Fac object — reinflateFac","text":"","code":"processedFujita = processDataCube(Fujita2023, sparsityThreshold=0.99, centerMode=1, scaleMode=2) model = parafac(processedFujita$data, nfac=1, nstart=1) #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100% Xhat = reinflateFac(model$Fac, processedFujita$data) #> Error in Fac[[1]]: subscript out of bounds"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/reinflateTensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tensor out of a set of matrices similar to a component model. — reinflateTensor","title":"Create a tensor out of a set of matrices similar to a component model. — reinflateTensor","text":"Create tensor set matrices similar component model.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/reinflateTensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tensor out of a set of matrices similar to a component model. — reinflateTensor","text":"","code":"reinflateTensor(A, B, C, returnAsTensor = FALSE)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/reinflateTensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tensor out of a set of matrices similar to a component model. — reinflateTensor","text":"x N matrix corresponding loadings first mode N components. B J x N matrix corresponding loadings second mode N components. C K x N matrix corresponding loadings third mode N components. returnAsTensor Boolean return rTensor S4 tensor object (default FALSE).","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/reinflateTensor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tensor out of a set of matrices similar to a component model. — reinflateTensor","text":"M, x J x K tensor.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/reinflateTensor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tensor out of a set of matrices similar to a component model. — reinflateTensor","text":"","code":"A = rnorm(108) B = rnorm(100) C = rnorm(10) M = reinflateTensor(A,B,C)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/reshapeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorganize longitudinal microbiome into a data cube ready for PARAFAC modelling. — reshapeData","title":"Reorganize longitudinal microbiome into a data cube ready for PARAFAC modelling. — reshapeData","text":"Reorganize longitudinal microbiome data cube ready PARAFAC modelling.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/reshapeData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorganize longitudinal microbiome into a data cube ready for PARAFAC modelling. — reshapeData","text":"","code":"reshapeData(   Xlong,   subjectMetadata,   featureMetadata,   timepointMetadata,   timepointOrder = sort(unique(timepointMetadata)) )"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/reshapeData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorganize longitudinal microbiome into a data cube ready for PARAFAC modelling. — reshapeData","text":"Xlong Longitudinal microbiome count data matrix (long) format. subjectMetadata Vector containing subjects corresponding measurements Xlong. featureMetadata Taxonomic classification microbiota, ordered columns Xlong. timepointMetadata Vector containing time points corresponding measurements Xlong. timepointOrder Vector containing required order timepoints timepointMetadata (default: sort(unique(timepointMetadata)) ).","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/reshapeData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorganize longitudinal microbiome into a data cube ready for PARAFAC modelling. — reshapeData","text":"#' list object containing data Array object data cube mode1 Dataframe subjects, ordered rows data cube. mode2 Taxonomic classification microbiota, ordered columns data cube. mode3 Dataframe time metadata, ordered third dimension data cube.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/reshapeData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorganize longitudinal microbiome into a data cube ready for PARAFAC modelling. — reshapeData","text":"","code":"library(dplyr)  Xlong = array(rnorm(108*5*10), c(108*5, 10)) subjects = rep(1:108, 5) features = rep(1:10) timepoints = rep(1:5, each=108)  dataset = reshapeData(Xlong, subjects, features, timepoints)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/sortComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort PARAFAC components based on variance explained per component. — sortComponents","title":"Sort PARAFAC components based on variance explained per component. — sortComponents","text":"Sort PARAFAC components based variance explained per component.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/sortComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort PARAFAC components based on variance explained per component. — sortComponents","text":"","code":"sortComponents(Fac, X)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/sortComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort PARAFAC components based on variance explained per component. — sortComponents","text":"Fac Fac object output parafac model X Input data","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/sortComponents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort PARAFAC components based on variance explained per component. — sortComponents","text":"Fac object sorted components","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/sortComponents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort PARAFAC components based on variance explained per component. — sortComponents","text":"","code":"X = array(rnorm(108*100*10), c(108,100,10)) model = parafac(X, 2) #>    |                                                                               |                                                                      |   0%   |                                                                               |=======                                                               |  10%   |                                                                               |==============                                                        |  20%   |                                                                               |=====================                                                 |  30%   |                                                                               |============================                                          |  40%   |                                                                               |===================================                                   |  50%   |                                                                               |==========================================                            |  60%   |                                                                               |=================================================                     |  70%   |                                                                               |========================================================              |  80%   |                                                                               |===============================================================       |  90%   |                                                                               |======================================================================| 100% sortedFac = sortComponents(model$Fac, X) #> Error in Fac[[1]]: subscript out of bounds"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/transformPARAFACloadings.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform PARAFAC loadings to an orthonormal basis. Note: this function only works for 3-way PARAFAC models. — transformPARAFACloadings","title":"Transform PARAFAC loadings to an orthonormal basis. Note: this function only works for 3-way PARAFAC models. — transformPARAFACloadings","text":"Transform PARAFAC loadings orthonormal basis. Note: function works 3-way PARAFAC models.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/transformPARAFACloadings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform PARAFAC loadings to an orthonormal basis. Note: this function only works for 3-way PARAFAC models. — transformPARAFACloadings","text":"","code":"transformPARAFACloadings(Fac, modeToCorrect, moreOutput = FALSE)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/transformPARAFACloadings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform PARAFAC loadings to an orthonormal basis. Note: this function only works for 3-way PARAFAC models. — transformPARAFACloadings","text":"Fac Fac object PARAFAC object, see parafac(). modeToCorrect Correct subject (1), feature (2) time mode (3). moreOutput Give orthonormal basis transformation matrices part output (default FALSE).","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/transformPARAFACloadings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform PARAFAC loadings to an orthonormal basis. Note: this function only works for 3-way PARAFAC models. — transformPARAFACloadings","text":"Corrected loadings specified mode.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/transformPARAFACloadings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform PARAFAC loadings to an orthonormal basis. Note: this function only works for 3-way PARAFAC models. — transformPARAFACloadings","text":"","code":"processedFujita = processDataCube(Fujita2023, sparsityThreshold=0.99, centerMode=1, scaleMode=2) model = parafac(processedFujita$data, nfac=2, nstart=1) #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100% transformedA = transformPARAFACloadings(model$Fac, 1) #> Error in Fac[[1]]: subscript out of bounds"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/vanderPloeg2024.html","id":null,"dir":"Reference","previous_headings":"","what":"vanderPloeg2024 longitudinal multi-omics dataset — vanderPloeg2024","title":"vanderPloeg2024 longitudinal multi-omics dataset — vanderPloeg2024","text":"vanderPloeg2024 longitudinal multi-omics dataset containing six oral microbiome niches, well salivary metabolomics oral health measurements.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/vanderPloeg2024.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vanderPloeg2024 longitudinal multi-omics dataset — vanderPloeg2024","text":"","code":"vanderPloeg2024"},{"path":[]},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/vanderPloeg2024.html","id":"vanderploeg-","dir":"Reference","previous_headings":"","what":"vanderPloeg2024","title":"vanderPloeg2024 longitudinal multi-omics dataset — vanderPloeg2024","text":"measured dataset contains three elements: data Array object data cube mode1 Dataframe subject metadata, ordered rows data cube. mode2 Taxonomic classification microbiota, ordered columns data cube. mode3 Dataframe time metadata, ordered third dimension array.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/vanderPloeg2024.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"vanderPloeg2024 longitudinal multi-omics dataset — vanderPloeg2024","text":"doi:10.1101/2024.03.18.585469","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/vect_to_fac.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert vectorized output of PARAFAC to a Fac list object with all loadings per mode. — vect_to_fac","title":"Convert vectorized output of PARAFAC to a Fac list object with all loadings per mode. — vect_to_fac","text":"Convert vectorized output PARAFAC Fac list object loadings per mode.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/vect_to_fac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert vectorized output of PARAFAC to a Fac list object with all loadings per mode. — vect_to_fac","text":"","code":"vect_to_fac(vect, X, sortComponents = FALSE)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/vect_to_fac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert vectorized output of PARAFAC to a Fac list object with all loadings per mode. — vect_to_fac","text":"vect Vectorized output PARAFAC modelling X Input data sortComponents Sort order components variation explained (default FALSE).","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/vect_to_fac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert vectorized output of PARAFAC to a Fac list object with all loadings per mode. — vect_to_fac","text":"Fac: list object loadings components per mode, ordered way Z$modes.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/vect_to_fac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert vectorized output of PARAFAC to a Fac list object with all loadings per mode. — vect_to_fac","text":"","code":"set.seed(123) A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2))  X = reinflateTensor(A, B, C) result = initializePARAFAC(X, 2, initialization=\"random\", output=\"vect\") Fac = vect_to_fac(result, X)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/news/index.html","id":"parafac4microbiome-development-version","dir":"Changelog","previous_headings":"","what":"parafac4microbiome (development version)","title":"parafac4microbiome (development version)","text":"Temp","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/news/index.html","id":"parafac4microbiome-132","dir":"Changelog","previous_headings":"","what":"parafac4microbiome 1.3.2","title":"parafac4microbiome 1.3.2","text":"CRAN release: 2025-07-31 Removal importMicrobiotaProcess due meeting CRAN requirements.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/news/index.html","id":"parafac4microbiome-131","dir":"Changelog","previous_headings":"","what":"parafac4microbiome 1.3.1","title":"parafac4microbiome 1.3.1","text":"Addition age, gender oral health data vanderPloeg2024. Addition TIFN2, MAINHEALTH, GOHTRANS, AP articles package documentation. rendered website due computational requirements.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/news/index.html","id":"parafac4microbiome-130","dir":"Changelog","previous_headings":"","what":"parafac4microbiome 1.3.0","title":"parafac4microbiome 1.3.0","text":"Removal --optimization parafac() since ALS scheme outperforms circumstances. Removal deprecated verbose option parafac(). Renaming vignettes easier visually parse (also preparation addition new vignettes). Overhaul entire testing suite robust fast.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/news/index.html","id":"parafac4microbiome-121","dir":"Changelog","previous_headings":"","what":"parafac4microbiome 1.2.1","title":"parafac4microbiome 1.2.1","text":"CRAN release: 2025-05-20 package now fully compatible R version 4.5. Due breaking changes TreeSummarizedExperiment package came R version 4.5, minimum version requirements TreeSummarizedExperiment, MicrobiotaProcess, SummarizedExperiment temporarily added dependencies. breaks compatibility older versions Ubuntu temporarily.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/news/index.html","id":"parafac4microbiome-120","dir":"Changelog","previous_headings":"","what":"parafac4microbiome 1.2.0","title":"parafac4microbiome 1.2.0","text":"Added function reshapeData() reshapes long dataframe counts data cube. Added tests reshapeData(). Fujita2023, Shao2019, vanderPloeg2024 now utilize reshapeData generated. Many bugfixes across functions package.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/news/index.html","id":"parafac4microbiome-112","dir":"Changelog","previous_headings":"","what":"parafac4microbiome 1.1.2","title":"parafac4microbiome 1.1.2","text":"CRAN release: 2025-03-21 Fixed URL README.md now point towards correct website.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/news/index.html","id":"parafac4microbiome-111","dir":"Changelog","previous_headings":"","what":"parafac4microbiome 1.1.1","title":"parafac4microbiome 1.1.1","text":"corcondia() now fully based N-way toolbox implementation. Fixed URL README.md now point towards correct website.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/news/index.html","id":"parafac4microbiome-110","dir":"Changelog","previous_headings":"","what":"parafac4microbiome 1.1.0","title":"parafac4microbiome 1.1.0","text":"vanderPloeg2024 now contains datasets original paper. contents /data-raw/ updated better organize studies. Frobenius norm tensor now collapsed subject mode (O-norm). Fixed issue flipLoadings() flip modes evidence three modes flipped. Fixed issue flipLoadings() work one model provided. vignettes updated better reflect updated functions version.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/news/index.html","id":"parafac4microbiome-103","dir":"Changelog","previous_headings":"","what":"parafac4microbiome 1.0.3","title":"parafac4microbiome 1.0.3","text":"CRAN release: 2024-09-24 Minor changes tests parafac_gradient make robust towards various platforms checked CRAN.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/news/index.html","id":"parafac4microbiome-102","dir":"Changelog","previous_headings":"","what":"parafac4microbiome 1.0.2","title":"parafac4microbiome 1.0.2","text":"CRAN release: 2024-09-17 rework importPhyloseq, importTreeSummarizedExperiment importMicrobiotaProcess meet CRAN requirements.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/news/index.html","id":"parafac4microbiome-101","dir":"Changelog","previous_headings":"","what":"parafac4microbiome 1.0.1","title":"parafac4microbiome 1.0.1","text":"Streamlined examples importPhyloseq, importTreeSummarizedExperiment importMicrobiotaProcess.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/news/index.html","id":"parafac4microbiome-100","dir":"Changelog","previous_headings":"","what":"parafac4microbiome 1.0.0","title":"parafac4microbiome 1.0.0","text":"Edited DESCRIPTION meet CRAN requirements. importPhyloseq modified use rTensor-based cube folding instead -loop. importTreeSummarizedExperiment modified use rTensor-based cube folding instead -loop. importMicrobiotaProcess modified use rTensor-based cube folding instead -loop.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/news/index.html","id":"parafac4microbiome-020","dir":"Changelog","previous_headings":"","what":"parafac4microbiome 0.2.0","title":"parafac4microbiome 0.2.0","text":"‘parafac’ now capable running --optimization using methods=“opt” parameter. now, default remains methods=“als” (.e. ALS algorithm) converges faster similar solution. importPhyloseq allows user import phyloseq object parafac modelling. importTreeSummarizedExperiment allows user import TreeSummarizedExperiment object parafac modelling. importMicrobiotaProcess allows user import MicrobiotaProcess object parafac modelling. text vignettes updated better reflect changes per version 0.1.0. readme vignettes figures now use sign flipping make comparison paper easier. documentation testing changes anticipating CRAN release.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/news/index.html","id":"parafac4microbiome-010","dir":"Changelog","previous_headings":"","what":"parafac4microbiome 0.1.0","title":"parafac4microbiome 0.1.0","text":"parafac now custom function based ALS algorithm allowing much output (see documentation). initializePARAFAC initializes input vectors either randomly based best-guess SVD model unfolded array. parafac_core_als contains ALS algorithm. parafac_fun calculates loss parafac model anticipation --optimization implementation. assessNumComponents checkModelStability renamed assessModelQuality assessModelStability respectively clarify use. checkModelStability now works minimum maximum number components. checkModelStability reports Factor Match Score plot. calculateFMS calculates pairwise Factor Match Scores list model objects. parafac, multiwayCenter, multiwayScale multiwayCLR now based new rTensor dependency tensor unfolding plotOverallTCCs merged plotModelTCCs. Many bugfixes. PARAFAC model solutions stable result. Many documentation changes across board. Overall, use case per function much clearer. Vignettes updated reflect utilize new changes. Removed dependency: paramGUI","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/news/index.html","id":"parafac4microbiome-002","dir":"Changelog","previous_headings":"","what":"parafac4microbiome 0.0.2","title":"parafac4microbiome 0.0.2","text":"Added NEWS.md","code":""}]
