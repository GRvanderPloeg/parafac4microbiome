[{"path":"https://grvanderploeg.github.io/parafac4microbiome/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 parafac4microbiome authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Fujita2023_analysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Fujita2023_analysis","text":"vignette examine model Fujita2023 data detail.","code":"library(parafac4microbiome) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(ggpubr)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Fujita2023_analysis.html","id":"processing-the-data-cube","dir":"Articles","previous_headings":"","what":"Processing the data cube","title":"Fujita2023_analysis","text":"data cube Fujita2023$data contains unprocessed counts. function processDataCube() performs processing counts following steps: performs feature selection based sparsityThreshold setting. Sparsity defined fraction samples microbial abundance (ASV/OTU otherwise) zero. performs centered log-ratio transformation sample using compositions::clr() function pseudo-count one (features, prior selection based sparsity). centers scales three-way array. complex subject, refer paper Rasmus Bro Age Smilde. centering across subject mode, make subjects comparable within time point. Scaling within feature mode avoids PARAFAC model focussing features abnormally high variation. outcome processing new version dataset. Please refer documentation processDataCube() information.","code":"processedFujita = processDataCube(Fujita2023, sparsityThreshold=0.99, CLR=TRUE, centerMode=1, scaleMode=2)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Fujita2023_analysis.html","id":"determining-the-correct-number-of-components","dir":"Articles","previous_headings":"","what":"Determining the correct number of components","title":"Fujita2023_analysis","text":"critical aspect PARAFAC modelling determine correct number components. developed function assessNumComponents() purpose. give function new dataset specify minimum maximum number components investigate number randomly initialized models try number components. Note: vignette reflects minimum working example analysing dataset due computational limitations automatic vignette rendering. Hence, look 1-3 components 5 random initializations . settings ideal real datasets. Please refer documentation assessNumComponents() information. now inspect output plots interest Fujita2023. overview plots show can reach ~35% explained variation take 3 components. CORCONDIA models ~98.5, well minimum requirement 60. Based overview, either 2 3 components seems fine.     Tucker Congruence Coefficients show us similar loading vectors mode , various components. value >=0.85 described problematic literature. Neither two-component model, three-component model loadings overly similar .","code":"# Setup minNumComponents = 1 maxNumComponents = 3 numRepetitions = 5 # number of randomly initialized models numFolds = 8 # number of jack-knifed models ctol = 1e-6 maxit = 200 numCores= 1  # Plot settings colourCols = c(\"\", \"Genus\", \"\") legendTitles = c(\"\", \"Genus\", \"\") xLabels = c(\"Replicate\", \"Feature index\", \"Time point\") legendColNums = c(0,5,0) arrangeModes = c(FALSE, TRUE, FALSE) continuousModes = c(FALSE,FALSE,TRUE)  # Assess the metrics to determine the correct number of components assessment = assessNumComponents(processedFujita$data, minNumComponents, maxNumComponents, numRepetitions, ctol=ctol, maxit=maxit, numCores=numCores) assessment$plots$overview assessment$plots$TCC[[2]] assessment$plots$TCCoverall[[2]] assessment$plots$TCC[[3]] assessment$plots$TCCoverall[[3]]"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Fujita2023_analysis.html","id":"jack-knifed-models","dir":"Articles","previous_headings":"","what":"Jack-knifed models","title":"Fujita2023_analysis","text":"Next, investigate stability models jack-knifing samples. give us information choose 2 3 components.  two-component jack-knifed models, seems instability second component, mainly time mode. three-component models stability overall.","code":"modelStabilityCheck(processedFujita, numComponents=2, numFolds=numFolds, considerGroups=FALSE,                     groupVariable=\"\", colourCols, legendTitles, xLabels, legendColNums, arrangeModes,                     continuousModes, ctol=ctol, maxit=maxit, numCores=numCores)$plot modelStabilityCheck(processedFujita, numComponents=3, numFolds=numFolds, considerGroups=FALSE,                     groupVariable=\"\", colourCols, legendTitles, xLabels, legendColNums, arrangeModes,                     continuousModes, ctol=ctol, maxit=maxit, numCores=numCores)$plot"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Fujita2023_analysis.html","id":"model-selection","dir":"Articles","previous_headings":"","what":"Model selection","title":"Fujita2023_analysis","text":"decided three-component model appropriate Fujita2023 dataset. can now select one random initializations assessNumComponents() output final model. ’re going select random initialisation corresponded maximum amount variation explained three components. Finally, visualize model using plotPARAFACmodel().","code":"numComponents = 3 modelChoice = which(assessment$metrics$varExp[,numComponents] == max(assessment$metrics$varExp[,numComponents])) finalModel = assessment$models[[numComponents]][[modelChoice]] plotPARAFACmodel(finalModel, processedFujita, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,   continuousModes = c(FALSE,FALSE,TRUE),   overallTitle = \"Fujita PARAFAC model\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/PARAFAC_introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to PARAFAC modelling","text":"Welcome parafac4microbiome R package! vignette explain data available package, can model using PARAFAC plot outcome. require following packages dependencies.","code":"library(parafac4microbiome) library(multiway) #> Loading required package: CMLS #> Loading required package: quadprog #> Loading required package: parallel #>  #> Attaching package: 'multiway' #> The following objects are masked from 'package:parafac4microbiome': #>  #>     corcondia, parafac library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/PARAFAC_introduction.html","id":"datasets","dir":"Articles","previous_headings":"","what":"Datasets","title":"Introduction to PARAFAC modelling","text":"parafac4microbiome package comes three datasets: Fujita2023, Shao2019 vanderPloeg2024. refer first authors respective papers. dataset objects lists following contents: data: data cube microbiome counts. mode1: metadata corresponding subject mode. mode2: metadata corresponding feature (microbial abundances) mode. mode3: metadata corresponding time mode. briefly show data datasets look like focus Fujita2023 remainder vignette. details datasets refer parafac4microbiome paper original papers listed respective help files. Modelling component selection explained detail vignettes corresponding dataset: vignette(\"Fujita2023_analysis\"), vignette(\"Shao2019_analysis\") vignette(\"vanderPloeg2024_analysis\").","code":"dim(Fujita2023$data) #> [1]   8  28 110 dim(Shao2019$data) #> [1] 395 959   4 dim(vanderPloeg2024$data) #> [1]   41 2253    7  # We focus on Fujita2023 head(Fujita2023$data[,,1]) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #> [1,] 11932    0    0    0    0    0    0    0    0   113     0   161     0 #> [2,] 11532    0    0    0    0    0    0    0    0     0     0     0     0 #> [3,] 10331    0    0    0    0    0    0    0    0   236     0     0  1824 #> [4,] 11528    0    0    0    0    0    0    0    0     0     0     0     0 #> [5,] 13735    0    0    0    0    0    0    0    0   139     0     0     0 #> [6,]  9167    0    0    0    0    0    0    0    0   247     0     0     0 #>      [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] #> [1,]     0     0     0     0     0   719     0     0     0     0     0   230 #> [2,]     0     0     0     0     0     0     0    38     0     0     0     0 #> [3,]     0     0     0     0     0     0     0     0     0     0   162     0 #> [4,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [5,]   217     0     0     0     0   239     0     0    67     0     0     0 #> [6,]     0     0     0     0     0     0     0     0     0     0     0     0 #>      [,26] [,27] [,28] #> [1,]     0     0     0 #> [2,]     0     0   231 #> [3,]     0     0     0 #> [4,]     0     0     0 #> [5,]     0     0     0 #> [6,]     0     0     0 head(Fujita2023$mode1) #> # A tibble: 6 × 1 #>   replicate.id #>          <int> #> 1            1 #> 2            2 #> 3            3 #> 4            4 #> 5            5 #> 6            6 head(Fujita2023$mode2) #>       ID  Kingdom         Phylum               Class #> 1 X_0002 Bacteria Proteobacteria Gammaproteobacteria #> 2 X_0004 Bacteria     Firmicutes          Clostridia #> 3 X_0007 Bacteria Proteobacteria Gammaproteobacteria #> 4 X_0008 Bacteria Proteobacteria Gammaproteobacteria #> 5 X_0010 Bacteria Proteobacteria Gammaproteobacteria #> 6 X_0015 Bacteria     Firmicutes          Clostridia #>                                 Order                Family #> 1                       Aeromonadales        Aeromonadaceae #> 2 Peptostreptococcales-Tissierellales Peptostreptococcaceae #> 3                     Burkholderiales      Burkholderiaceae #> 4                     Burkholderiales      Burkholderiaceae #> 5                    Enterobacterales          unidentified #> 6                      Lachnospirales       Lachnospiraceae #>                                        Genus      Species #> 1                                  Aeromonas unidentified #> 2                             Clostridioides   mangenotii #> 3                                  Pandoraea unidentified #> 4 Burkholderia-Caballeronia-Paraburkholderia unidentified #> 5                               unidentified unidentified #> 6                          Lachnoclostridium unidentified head(Fujita2023$mode3) #> # A tibble: 6 × 1 #>    time #>   <dbl> #> 1     1 #> 2     2 #> 3     3 #> 4     4 #> 5     5 #> 6     6"},{"path":[]},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/PARAFAC_introduction.html","id":"processing-the-data-cube","dir":"Articles","previous_headings":"Analysis","what":"Processing the data cube","title":"Introduction to PARAFAC modelling","text":"shown , data cube Fujita2023$data contains unprocessed counts. function processDataCube() performs processing counts following steps: performs feature selection based sparsityThreshold setting. Sparsity defined fraction samples microbial abundance (ASV/OTU otherwise) zero. performs centered log-ratio transformation sample using compositions::clr() function pseudo-count one (features, prior selection based sparsity). centers scales three-way array. complex subject, refer paper Rasmus Bro Age Smilde. centering across subject mode, make subjects comparable within time point. Scaling within feature mode avoids PARAFAC model focussing features abnormally high variation. outcome processing new version dataset. Please refer documentation processDataCube() information.","code":"processedFujita = processDataCube(Fujita2023, sparsityThreshold=0.99, CLR=TRUE, centerMode=1, scaleMode=2) head(processedFujita$data[,,1]) #>         [,1]   [,2]    [,3]    [,4]    [,5]   [,6]    [,7]    [,8]   [,9] #> [1,] -0.5098 -0.265 -0.2669 -0.2743 -0.3655 -0.562 -0.2923 -0.5410 -0.890 #> [2,]  0.0763  0.017  0.0171  0.0176  0.0234  0.036  0.0187  0.0346  0.057 #> [3,] -0.5155 -0.179 -0.1797 -0.1847 -0.2461 -0.378 -0.1969 -0.3644 -0.600 #> [4,]  0.5277  0.218  0.2197  0.2258  0.3008  0.462  0.2406  0.4454  0.733 #> [5,] -0.2311 -0.228 -0.2296 -0.2359 -0.3144 -0.483 -0.2514 -0.4653 -0.766 #> [6,] -0.0526  0.102  0.1022  0.1050  0.1399  0.215  0.1119  0.2071  0.341 #>       [,10]  [,11]  [,12]  [,13]  [,14]   [,15]   [,16] [,17]   [,18]  [,19] #> [1,]  0.544 -0.862 -1.703 -0.495 -0.672 -0.4608 -0.2023  9.04 -0.9420 -1.199 #> [2,] -0.805 -0.575 -0.998 -0.272  0.043  0.0295  0.0130 -2.88  0.0603  4.373 #> [3,]  0.818  3.962 -1.487 -0.427 -0.453 -0.3104 -0.1363 -3.50 -0.6344 -1.010 #> [4,] -0.703 -0.369 -0.495 -0.114  0.553  0.3793  0.1666 -2.25  0.7754 -0.142 #> [5,]  0.627 -0.824  6.713 -0.466 -0.578 -0.3964 -0.1740  7.02 -0.8102 -1.118 #> [6,]  0.975 -0.488 -0.787 -0.206  0.257  0.1764  0.0775 -2.62  0.3607 -0.398 #>        [,20]  [,21]   [,22]   [,23] #> [1,] -0.3990 10.070 -0.6812 -0.7411 #> [2,]  0.0255 -1.517  0.0436  0.0474 #> [3,] -0.2687 -2.252 -0.4588 -0.4991 #> [4,]  0.3285 -0.761  0.5608  0.6100 #> [5,] -0.3432 -2.438 -0.5860 -0.6374 #> [6,]  0.1528 -1.200  0.2608  0.2837"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/PARAFAC_introduction.html","id":"making-a-parafac-model","dir":"Articles","previous_headings":"Analysis","what":"Making a PARAFAC model","title":"Introduction to PARAFAC modelling","text":"processed data ready modelled using Parallel Factor Analysis. arbitrarily set number factors (.e. number components) three. normally outcome detailed investigation correct number components, described vignette(\"Fujita2023_analysis\"), vignette(\"Shao2019_analysis\") vignette(\"vanderPloeg2024_analysis\"). output function parafac object containing loadings mode statistics like R-squared sum squared error. model explains 39.029 percent variation processed data cube.","code":"set.seed(0) # for reproducibility model = parafac(processedFujita$data, nfac=3, verbose=FALSE)  head(model$A) #>        [,1]   [,2]   [,3] #> [1,] -0.258  0.788 -0.616 #> [2,] -0.376  0.787 -0.175 #> [3,] -0.363  0.956  2.617 #> [4,]  2.620 -1.851 -0.487 #> [5,] -0.283  0.237 -0.229 #> [6,] -0.191  0.231 -0.206 head(model$B) #>        [,1]   [,2]   [,3] #> [1,]  1.097 -1.078 -0.872 #> [2,]  0.511  2.368 -0.244 #> [3,] -2.141  0.364 -0.161 #> [4,] -2.305  0.162 -0.181 #> [5,] -0.579 -2.175 -0.232 #> [6,]  0.346  2.306 -0.421 head(model$C) #>          [,1]     [,2]  [,3] #> [1,] -0.02121 -0.00863 0.316 #> [2,] -0.02601  0.05998 0.364 #> [3,] -0.05666  0.00198 0.346 #> [4,] -0.01825  0.04829 0.336 #> [5,] -0.00123  0.01621 0.314 #> [6,] -0.00424  0.02141 0.318 model$Rsq #> [1] 0.39"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/PARAFAC_introduction.html","id":"plotting-a-parafac-model","dir":"Articles","previous_headings":"Analysis","what":"Plotting a PARAFAC model","title":"Introduction to PARAFAC modelling","text":"implemented plotPARAFACmodel() function allow user full control want visualize model. , lot plotting options can used, can see . brief overview: colourCols: per mode (subject, feature, time), specifies variable loading bar plot coloured. legendTitles: titles legends per mode, colourCode specified mode, legend generated. xLabels: labels x axis mode. legendColNums: number columns legend mode. colourCode specified mode, legend generated. arrangeModes: vector boolean values specifying loadings grouped colourCol easier inspection. continuousModes: vector boolean values specifying loadings visualized line plot instead default bar plot. overallTitle: title plot. full overview, please refer documentation plotPARAFACmodel().  concludes introduction parafac4microbiome package. hope gives sufficient information get started. details modelling specific datasets, please refer vignette(\"Fujita2023_analysis\"), vignette(\"Shao2019_analysis\") vignette(\"vanderPloeg2024_analysis\")","code":"plotPARAFACmodel(model, processedFujita,   colourCols = c(\"\", \"Genus\", \"\"),   legendTitles = c(\"\", \"Genus\", \"\"),   xLabels = c(\"Replicate\", \"Feature index\", \"Time point\"),   legendColNums = c(0,5,0),   arrangeModes = c(FALSE, TRUE, FALSE),   continuousModes = c(FALSE,FALSE,TRUE),   overallTitle = \"Fujita PARAFAC model\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Shao2019_analysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Shao2019_analysis","text":"vignette examine model Shao2019 data detail.","code":"library(parafac4microbiome) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(ggpubr)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Shao2019_analysis.html","id":"processing-the-data-cube","dir":"Articles","previous_headings":"","what":"Processing the data cube","title":"Shao2019_analysis","text":"data cube Shao2019$data contains unprocessed counts. function processDataCube() performs processing counts following steps: performs feature selection based sparsityThreshold setting. Sparsity defined fraction samples microbial abundance (ASV/OTU otherwise) zero. Shao2019 can take delivery mode groups account feature selection. calculating sparsity feature subject group compare sparsity threshold set. feature passes threshold either group, selected. performs centered log-ratio transformation sample using compositions::clr() function pseudo-count one (features, prior selection based sparsity). centers scales three-way array. complex subject, refer paper Rasmus Bro Age Smilde. centering across subject mode, make subjects comparable within time point. Scaling within feature mode avoids PARAFAC model focussing features abnormally high variation. outcome processing new version dataset. Please refer documentation processDataCube() information.","code":"processedShao = processDataCube(Shao2019, sparsityThreshold=0.9, considerGroups=TRUE, groupVariable=\"Delivery_mode\", CLR=TRUE, centerMode=1, scaleMode=2)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Shao2019_analysis.html","id":"determining-the-correct-number-of-components","dir":"Articles","previous_headings":"","what":"Determining the correct number of components","title":"Shao2019_analysis","text":"critical aspect PARAFAC modelling determine correct number components. developed function assessNumComponents() purpose. give function new dataset specify minimum maximum number components investigate number randomly initialized models try number components. Note: vignette reflects minimum working example analysing dataset due computational limitations. Hence, look 1-3 components 5 random initializations . settings ideal real datasets. Please refer documentation assessNumComponents() information. now inspect output plots interest Shao2019. overview plots shows can explain ~17% variation three-component model. quite low. CORCONDIA number components ~99.8 higher, well minimum requirement 60.   Tucker Congruence Coefficients show us similar loading vectors mode , various components. value >=0.85 described problematic literature. Neither two-component model, three-component model loadings similar .","code":"# Setup # For computational purposes we deviate from the default settings minNumComponents = 1 maxNumComponents = 3 numRepetitions = 5 # number of randomly initialized models numFolds = 5 # number of jack-knifed models maxit = 200 ctol= 1e-4 # this is a really bad setting but is needed to save computational time numCores = 1  colourCols = c(\"Delivery_mode\", \"phylum\", \"\") legendTitles = c(\"Delivery mode\", \"Phylum\", \"\") xLabels = c(\"Subject index\", \"Feature index\", \"Time index\") legendColNums = c(3,5,0) arrangeModes = c(TRUE, TRUE, FALSE) continuousModes = c(FALSE,FALSE,TRUE)  # Assess the metrics to determine the correct number of components assessment = assessNumComponents(processedShao$data, minNumComponents, maxNumComponents, numRepetitions, ctol=ctol, maxit=maxit, numCores=numCores) assessment$plots$overview assessment$plots$TCC[[2]] assessment$plots$TCC[[3]]"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Shao2019_analysis.html","id":"jack-knifed-models","dir":"Articles","previous_headings":"","what":"Jack-knifed models","title":"Shao2019_analysis","text":"Next, investigate stability models jack-knifing samples. give us information choose 2 3 components.  models quite unstable. models likely need iterations strict tolerance converge properly (see documentation assessNumComponents() modelStabilityCheck() info). simplicity’s sake select two components , refer parafac4microbiome paper outcome rigorous check performed.","code":"modelStabilityCheck(processedShao, numComponents=2, numFolds=numFolds, considerGroups=TRUE,                                groupVariable=\"Delivery_mode\", colourCols, legendTitles, xLabels, legendColNums, arrangeModes,                                continuousModes, ctol=ctol, maxit=maxit, numCores=numCores)$plot modelStabilityCheck(processedShao, numComponents=3, numFolds=numFolds, considerGroups=TRUE,                                groupVariable=\"Delivery_mode\", colourCols, legendTitles, xLabels, legendColNums, arrangeModes,                                continuousModes, ctol=ctol, maxit=maxit, numCores=numCores)$plot"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/Shao2019_analysis.html","id":"model-selection","dir":"Articles","previous_headings":"","what":"Model selection","title":"Shao2019_analysis","text":"decided two-component model appropriate Shao2019 dataset. can now select one random initializations assessNumComponents() output final model. ’re going select random initialisation corresponded maximum amount variation explained two components. Finally, visualize model using plotPARAFACmodel().","code":"numComponents = 2 modelChoice = which(assessment$metrics$varExp[,numComponents] == max(assessment$metrics$varExp[,numComponents])) finalModel = assessment$models[[numComponents]][[modelChoice]] plotPARAFACmodel(finalModel, processedShao, colourCols, legendTitles, xLabels, legendColNums, arrangeModes,   continuousModes = c(FALSE,FALSE,TRUE),   overallTitle = \"Shao PARAFAC model\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/vanderPloeg2024_analysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"vanderPloeg2024_analysis","text":"vignette examine model vanderPloeg2024 data detail.","code":"library(parafac4microbiome) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(ggpubr)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/vanderPloeg2024_analysis.html","id":"processing-the-data-cube","dir":"Articles","previous_headings":"","what":"Processing the data cube","title":"vanderPloeg2024_analysis","text":"data cube vanderPloeg2024$data contains unprocessed counts. function processDataCube() performs processing counts following steps: performs feature selection based sparsityThreshold setting. Sparsity defined fraction samples microbial abundance (ASV/OTU otherwise) zero. vanderPloeg2024 can take RFgroups groups account feature selection. calculating sparsity feature subject group compare sparsity threshold set. feature passes threshold either group, selected. performs centered log-ratio transformation sample using compositions::clr() function pseudo-count one (features, prior selection based sparsity). centers scales three-way array. complex subject, refer paper Rasmus Bro Age Smilde. centering across subject mode, make subjects comparable within time point. Scaling within feature mode avoids PARAFAC model focussing features abnormally high variation. outcome processing new version dataset. Please refer documentation processDataCube() information.","code":"processedPloeg = processDataCube(vanderPloeg2024, sparsityThreshold=0.50, considerGroups=TRUE, groupVariable=\"RFgroup\", CLR=TRUE, centerMode=1, scaleMode=2)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/vanderPloeg2024_analysis.html","id":"determining-the-correct-number-of-components","dir":"Articles","previous_headings":"","what":"Determining the correct number of components","title":"vanderPloeg2024_analysis","text":"critical aspect PARAFAC modelling determine correct number components. developed function assessNumComponents() purpose. give function new dataset specify minimum maximum number components investigate number randomly initialized models try number components. Note: vignette reflects minimum working example analysing dataset due computational limitations. Hence, look 1-3 components 5 random initializations . settings ideal real datasets. Please refer documentation assessNumComponents() information. now inspect output plots interest vanderPloeg2024. seems clear-cut case two-component model, three-component models CORCONDIA -600. maximum amount variation can describe ~20%.  Tucker Congruence Coefficients show us similar loading vectors mode , various components. value >=0.85 described problematic literature. confirm already observed CORCONDIA metric: loadings feature time mode three-component model highly similar . Hence must select two-component model.","code":"# Setup # For computational purposes we deviate from the default settings minNumComponents = 1 maxNumComponents = 3 numRepetitions = 5 # number of randomly initialized models numFolds = 5 # number of jack-knifed models ctol = 1e-6 maxit = 250 numCores = 1  colourCols = c(\"RFgroup\", \"Phylum\", \"\") legendTitles = c(\"RF group\", \"Phylum\", \"\") xLabels = c(\"Subject index\", \"Feature index\", \"Time index\") legendColNums = c(3,5,0) arrangeModes = c(TRUE, TRUE, FALSE) continuousModes = c(FALSE,FALSE,TRUE)  # Assess the metrics to determine the correct number of components assessment = assessNumComponents(processedPloeg$data, minNumComponents, maxNumComponents, numRepetitions, ctol=ctol, maxit=maxit, numCores=numCores) assessment$plots$overview assessment$plots$TCC[[2]] assessment$plots$TCC[[3]]"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/vanderPloeg2024_analysis.html","id":"jack-knifed-models","dir":"Articles","previous_headings":"","what":"Jack-knifed models","title":"vanderPloeg2024_analysis","text":"Next, investigate stability models jack-knifing samples. briefly inspect two-component three-component cases although already know appropriate data.   two-component models stable. three-component models indeed show similar time profiles also instability.","code":"modelStabilityCheck(processedPloeg, numComponents=2, numFolds=numFolds, considerGroups=TRUE,                                groupVariable=\"Delivery_mode\", colourCols, legendTitles, xLabels, legendColNums, arrangeModes,                                continuousModes, ctol=ctol, maxit=maxit, numCores=numCores)$plot modelStabilityCheck(processedPloeg, numComponents=3, numFolds=numFolds, considerGroups=TRUE,                                groupVariable=\"Delivery_mode\", colourCols, legendTitles, xLabels, legendColNums, arrangeModes,                                continuousModes, ctol=ctol, maxit=maxit, numCores=numCores)$plot"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/articles/vanderPloeg2024_analysis.html","id":"model-selection","dir":"Articles","previous_headings":"","what":"Model selection","title":"vanderPloeg2024_analysis","text":"decided two-component model appropriate vanderPloeg2024 dataset. can now select one random initializations assessNumComponents() output final model. ’re going select random initialisation corresponded maximum amount variation explained two components. Finally, visualize model using plotPARAFACmodel().","code":"numComponents = 2 modelChoice = which(assessment$metrics$varExp[,numComponents] == max(assessment$metrics$varExp[,numComponents])) finalModel = assessment$models[[numComponents]][[modelChoice]] plotPARAFACmodel(finalModel, processedPloeg, colourCols, legendTitles, xLabels, legendColNums, arrangeModes, continuousModes,   overallTitle = \"vanderPloeg2024 PARAFAC model\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Geert Roelof van der Ploeg. Author, maintainer.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"van der Ploeg G (2024). parafac4microbiome: Parallel Factor Analysis modelling longitudinal microbiome data. R package version 0.0.1, https://grvanderploeg.github.io/parafac4microbiome/.","code":"@Manual{,   title = {parafac4microbiome: Parallel Factor Analysis modelling for longitudinal microbiome data},   author = {Geert Roelof {van der Ploeg}},   year = {2024},   note = {R package version 0.0.1},   url = {https://grvanderploeg.github.io/parafac4microbiome/}, }"},{"path":[]},{"path":"https://grvanderploeg.github.io/parafac4microbiome/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Parallel Factor Analysis modelling for longitudinal microbiome data","text":"parafac4microbiome package enables R users easy way create Parallel Factor Analysis (PARAFAC) models longitudinal microbiome data. processDataCube() can used process microbiome count data appropriately multi-way data array. parafac() allows user create Parallel Factor Analysis model multi-way data array. assessNumComponents() helps user select appropriate number components PARAFAC model. modelStabilityCheck() performs jack-knifing samples inspect stability PARAFAC model. plotPARAFACmodel() helps visually inspect PARAFAC model. package also comes three example datasets. Fujita2023: -vitro experiment ocean inocula peptide medium, sampled every day 110 days (https://doi.org/10.1186/s40168-023-01474-5). Shao2019: large cohort dataset vaginally caesarean-section born infants London (https://www.nature.com/articles/s41586-019-1560-1). vanderPloeg2024: small gingivitis intervention dataset specific response groups (manuscript preparation). basic introduction package given vignette(\"PARAFAC_introduction\") modelling example datasets elaborated respective vignettes vignette(\"Fujita2023_analysis\"), vignette(\"Shao2019_analysis\") vignette(\"vanderPloeg2024_analysis\").","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Parallel Factor Analysis modelling for longitudinal microbiome data","text":"can install development version parafac4microbiome GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"GRvanderPloeg/parafac4microbiome\", build_vignettes = TRUE)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Parallel Factor Analysis modelling for longitudinal microbiome data","text":"Please use following citation using package: van der Ploeg, G. R., et al. (2024). Exploratory analysis longitudinal microbiome data using Parallel Factor Analysis: opportunities challenges [Manuscript preparation].","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Parallel Factor Analysis modelling for longitudinal microbiome data","text":"","code":"library(parafac4microbiome) library(multiway) #> Loading required package: CMLS #> Loading required package: quadprog #> Loading required package: parallel #>  #> Attaching package: 'multiway' #> The following objects are masked from 'package:parafac4microbiome': #>  #>     corcondia, parafac library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) #> Warning: package 'ggplot2' was built under R version 4.3.3 library(ggpubr) set.seed(0) # for reproducibility  # Process the data cube processedFujita = processDataCube(Fujita2023, sparsityThreshold=0.99, CLR=TRUE, centerMode=1, scaleMode=2)  # Make a PARAFAC model model = parafac(processedFujita$data, nfac=3, verbose=FALSE)  # Plot the PARAFAC model using some metadata plotPARAFACmodel(model, processedFujita,   colourCols = c(\"\", \"Genus\", \"\"),   legendTitles = c(\"\", \"Genus\", \"\"),   xLabels = c(\"Replicate\", \"Feature index\", \"Time point\"),   legendColNums = c(0,5,0),   arrangeModes = c(FALSE, TRUE, FALSE),   continuousModes = c(FALSE,FALSE,TRUE),   overallTitle = \"Fujita PARAFAC model\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/Fujita2023.html","id":null,"dir":"Reference","previous_headings":"","what":"Fujita2023 longitudinal microbiome data — Fujita2023","title":"Fujita2023 longitudinal microbiome data — Fujita2023","text":"Fujita2023 longitudinal microbiome dataset three-dimensional array, replicates mode 1, microbial abundances mode 2 time mode 3.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/Fujita2023.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fujita2023 longitudinal microbiome data — Fujita2023","text":"","code":"Fujita2023"},{"path":[]},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/Fujita2023.html","id":"fujita-","dir":"Reference","previous_headings":"","what":"Fujita2023","title":"Fujita2023 longitudinal microbiome data — Fujita2023","text":"list object three elements: data Array object data cube mode1 Dataframe subject metadata, ordered rows data cube. mode2 Taxonomic classification microbiota, ordered columns data cube. mode3 Dataframe time metadata, ordered third dimension array.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/Fujita2023.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Fujita2023 longitudinal microbiome data — Fujita2023","text":"https://doi.org/10.1186/s40168-023-01474-5","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/Shao2019.html","id":null,"dir":"Reference","previous_headings":"","what":"Shao2019 longitudinal microbiome data — Shao2019","title":"Shao2019 longitudinal microbiome data — Shao2019","text":"Shao2019 longitudinal microbiome dataset three-dimensional array, subjects mode 1, microbial abundances mode 2 time mode 3. Note: time points 4, 7, 21 Infancy used. Note: -zero microbial abundances removed save disk space.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/Shao2019.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shao2019 longitudinal microbiome data — Shao2019","text":"","code":"Shao2019"},{"path":[]},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/Shao2019.html","id":"shao-","dir":"Reference","previous_headings":"","what":"Shao2019","title":"Shao2019 longitudinal microbiome data — Shao2019","text":"list object three elements: data Array object data cube mode1 Dataframe subject metadata, ordered rows data cube. mode2 Taxonomic classification microbiota, ordered columns data cube. mode3 Dataframe time metadata, ordered third dimension array.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/Shao2019.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Shao2019 longitudinal microbiome data — Shao2019","text":"https://doi.org/10.1038/s41586-019-1560-1","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/assessNumComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"Create randomly initialized models for determining the correct number of components. — assessNumComponents","title":"Create randomly initialized models for determining the correct number of components. — assessNumComponents","text":"Create randomly initialized models determining correct number components.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/assessNumComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create randomly initialized models for determining the correct number of components. — assessNumComponents","text":"","code":"assessNumComponents(   X,   minNumComponents = 1,   maxNumComponents = 5,   numRepetitions = 100,   ctol = 1e-06,   maxit = 2500,   numCores = 1 )"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/assessNumComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create randomly initialized models for determining the correct number of components. — assessNumComponents","text":"X Input data minNumComponents Minimum number components (default 1). maxNumComponents Maximum number components (default 5). numRepetitions Number randomly initialized models create (default 100). ctol Change SSQ needed model converged (default 1e-6). maxit Maximum number iterations (default 2500). numCores Number cores use. set larger 1, run job parallel (default 1)","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/assessNumComponents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create randomly initialized models for determining the correct number of components. — assessNumComponents","text":"list object following: plot: Plots assessed metrics overview plot showing summary . metrics: metrics every created model (number iterations, sum squared errors, CORCONDIA score variance explained). models: created models.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/assessNumComponents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create randomly initialized models for determining the correct number of components. — assessNumComponents","text":"","code":"X = Fujita2023$data assessment = assessNumComponents(X, minNumComponents=1, maxNumComponents=3, numRepetitions=5) assessment$plots$overview"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateSparsity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate sparsity across the feature mode of a multi-way array. — calculateSparsity","title":"Calculate sparsity across the feature mode of a multi-way array. — calculateSparsity","text":"Calculate sparsity across feature mode multi-way array.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateSparsity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate sparsity across the feature mode of a multi-way array. — calculateSparsity","text":"","code":"calculateSparsity(dataset, considerGroups = FALSE, groupVariable = \"\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateSparsity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate sparsity across the feature mode of a multi-way array. — calculateSparsity","text":"dataset See Fujita2023, Shao2019 vanderPloeg2024. considerGroups Consider subject groups calculating sparsity (default FALSE) groupVariable Column name dataset$mode1 used consider groups (default \"\")","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateSparsity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate sparsity across the feature mode of a multi-way array. — calculateSparsity","text":"Vector sparsity fractions (N x J) N number groups J number features.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateSparsity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate sparsity across the feature mode of a multi-way array. — calculateSparsity","text":"","code":"# No groups sparsity = calculateSparsity(Fujita2023) length(sparsity) #> [1] 28 hist(sparsity)   # Consider groups colnames(Shao2019$mode1) #> [1] \"Individual\"    \"Delivery_mode\" sparsity = calculateSparsity(Shao2019, considerGroups=TRUE, groupVariable=\"Delivery_mode\") dim(sparsity) #> [1]   2 959 hist(sparsity[1,])  hist(sparsity[2,])"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateVarExp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the variation explained by a PARAFAC model. — calculateVarExp","title":"Calculate the variation explained by a PARAFAC model. — calculateVarExp","text":"Calculate variation explained PARAFAC model.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateVarExp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the variation explained by a PARAFAC model. — calculateVarExp","text":"","code":"calculateVarExp(model, X)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateVarExp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the variation explained by a PARAFAC model. — calculateVarExp","text":"model PARAFAC model output parafac() function. X Input data PARAFAC model.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateVarExp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the variation explained by a PARAFAC model. — calculateVarExp","text":"variation explained model, expressed fraction (0-1).","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/calculateVarExp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the variation explained by a PARAFAC model. — calculateVarExp","text":"","code":"X = Fujita2023$data model = parafac(X, nfac=1, nstart=1, verbose=FALSE) calculateVarExp(model, X) #> [1] 0.7372742"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/corcondia.html","id":null,"dir":"Reference","previous_headings":"","what":"Core Consistency Diagnostic — corcondia","title":"Core Consistency Diagnostic — corcondia","text":"Calculates Bro Kiers's core consistency diagnostic (CORCONDIA) fit parafac parafac2 model. Parafac2, diagnostic calculated transforming data.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/corcondia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Core Consistency Diagnostic — corcondia","text":"","code":"corcondia(X, object, divisor = c(\"nfac\", \"core\"))"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/corcondia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Core Consistency Diagnostic — corcondia","text":"X Thee-way array dim=c(,J,K) four-way data array dim=c(,J,K,L). Can also input list two-way three-way arrays (Parafac2). object Object class \"parafac\" class \"parafac2\". divisor Divide number factors (default) core sum squares.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/corcondia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Core Consistency Diagnostic — corcondia","text":"CORCONDIA value","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/corcondia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Core Consistency Diagnostic — corcondia","text":"","code":"library(multiway) #> Loading required package: CMLS #> Loading required package: quadprog #> Loading required package: parallel #>  #> Attaching package: ‘multiway’ #> The following objects are masked from ‘package:parafac4microbiome’: #>  #>     corcondia, parafac ##########   EXAMPLE   ##########  # create random data array with Parafac structure set.seed(3) mydim <- c(50,20,5) nf <- 2 Amat <- matrix(rnorm(mydim[1]*nf),mydim[1],nf) Bmat <- matrix(runif(mydim[2]*nf),mydim[2],nf) Cmat <- matrix(runif(mydim[3]*nf),mydim[3],nf) Xmat <- array(tcrossprod(Amat,krprod(Cmat,Bmat)),dim=mydim) Emat <- array(rnorm(prod(mydim)),dim=mydim) Emat <- nscale(Emat, 0, ssnew = sumsq(Xmat))   # SNR=1 X <- Xmat + Emat  # fit Parafac model (1-4 factors) pfac1 <- parafac(X,nfac=1,nstart=1) #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100% pfac2 <- parafac(X,nfac=2,nstart=1) #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100% pfac3 <- parafac(X,nfac=3,nstart=1) #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100% pfac4 <- parafac(X,nfac=4,nstart=1) #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100%  # check corcondia corcondia(X, pfac1) #> [1] 100 corcondia(X, pfac2) #> [1] 99.57089 corcondia(X, pfac3) #> [1] 87.15035 corcondia(X, pfac4) #> [1] -26.26498"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/correctPARAFACloadings.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform PARAFAC loadings to an orthonormal basis.\nNote: this function only works for 3-way PARAFAC models. — correctPARAFACloadings","title":"Transform PARAFAC loadings to an orthonormal basis.\nNote: this function only works for 3-way PARAFAC models. — correctPARAFACloadings","text":"Transform PARAFAC loadings orthonormal basis. Note: function works 3-way PARAFAC models.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/correctPARAFACloadings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform PARAFAC loadings to an orthonormal basis.\nNote: this function only works for 3-way PARAFAC models. — correctPARAFACloadings","text":"","code":"correctPARAFACloadings(dataset, model, modeToCorrect, moreOutput = FALSE)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/correctPARAFACloadings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform PARAFAC loadings to an orthonormal basis.\nNote: this function only works for 3-way PARAFAC models. — correctPARAFACloadings","text":"dataset longitudinal microbiome dataset, ideally processed processDataCube(), formatted follows: data Array object data cube mode1 Dataframe subject metadata, ordered rows data cube. mode2 Taxonomic classification microbiota, ordered columns data cube. mode3 Dataframe time metadata, ordered third dimension array. model Model output parafac(). modeToCorrect Correct subject (1), feature (2) time mode (3). moreOutput Give orthonormal basis transformation matrices part output (default FALSE).","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/correctPARAFACloadings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform PARAFAC loadings to an orthonormal basis.\nNote: this function only works for 3-way PARAFAC models. — correctPARAFACloadings","text":"Corrected loadings specified mode.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/correctPARAFACloadings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform PARAFAC loadings to an orthonormal basis.\nNote: this function only works for 3-way PARAFAC models. — correctPARAFACloadings","text":"","code":"library(multiway) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(paramGUI) library(pracma) set.seed(0)  # Make PARAFAC model processedFujita = processDataCube(Fujita2023, sparsityThreshold=0.99, centerMode=1, scaleMode=2) model = parafac(processedFujita$data, nfac=2, nstart=1, verbose=FALSE)  correctedA = correctPARAFACloadings(processedFujita, model, 1) plot(correctedA[,1], correctedA[,2])"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/modelStabilityCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Jack-knifing procedure to determine PARAFAC model stability. — modelStabilityCheck","title":"Jack-knifing procedure to determine PARAFAC model stability. — modelStabilityCheck","text":"Jack-knifing procedure determine PARAFAC model stability.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/modelStabilityCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jack-knifing procedure to determine PARAFAC model stability. — modelStabilityCheck","text":"","code":"modelStabilityCheck(   dataset,   numComponents = 1,   numFolds = nrow(X),   considerGroups = FALSE,   groupVariable = \"\",   colourCols = NULL,   legendTitles = NULL,   xLabels = NULL,   legendColNums = NULL,   arrangeModes = NULL,   continuousModes = NULL,   ctol = 1e-06,   maxit = 2500,   numCores = 1 )"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/modelStabilityCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jack-knifing procedure to determine PARAFAC model stability. — modelStabilityCheck","text":"dataset See Fujita2023, Shao2019 vanderPloeg2024. numComponents Number components desired PARAFAC model numFolds Number jack-knifed operations perform considerGroups Consider subject groups calculating sparsity (default FALSE) groupVariable Column name dataset$mode1 used consider groups (default \"\") colourCols Vector strings stating column names factorized colours per mode. legendTitles Vector strings stating legend title per mode. xLabels Vector strings stating x-axis labels per mode. legendColNums Vector integers stating desired number columns legends per mode. arrangeModes Vector boolean values per mode, stating loadings arranged according colourCols (TRUE) (FALSE). continuousModes Vector boolean values per mode, stating loadings plotted line plot (TRUE) bar plot (FALSE). ctol Change SSQ needed model converged (default 1e-6). maxit Maximum number iterations (default 2500). numCores Number cores use. set larger 1, run job parallel (default 1)","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/modelStabilityCheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jack-knifing procedure to determine PARAFAC model stability. — modelStabilityCheck","text":"List , Bs, Cs PARAFAC models well plot median model error bars.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/modelStabilityCheck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jack-knifing procedure to determine PARAFAC model stability. — modelStabilityCheck","text":"","code":"processedFujita = processDataCube(Fujita2023, sparsityThreshold=0.99, centerMode=1, scaleMode=2) modelStability = modelStabilityCheck(processedFujita, numComponents=3)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayCLR.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a centered log-ratio transform over a multi-way array — multiwayCLR","title":"Perform a centered log-ratio transform over a multi-way array — multiwayCLR","text":"Note: Propagates NAs corresponding missing samples.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayCLR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a centered log-ratio transform over a multi-way array — multiwayCLR","text":"","code":"multiwayCLR(cube)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayCLR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a centered log-ratio transform over a multi-way array — multiwayCLR","text":"cube Multi-way array counts","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayCLR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a centered log-ratio transform over a multi-way array — multiwayCLR","text":"CLRed cube","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayCLR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a centered log-ratio transform over a multi-way array — multiwayCLR","text":"","code":"cubeCLR = multiwayCLR(Fujita2023$data)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayCenter.html","id":null,"dir":"Reference","previous_headings":"","what":"Center a multi-way array — multiwayCenter","title":"Center a multi-way array — multiwayCenter","text":"Note: function exists multiway::ncenter() handle NAs.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayCenter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Center a multi-way array — multiwayCenter","text":"","code":"multiwayCenter(cube, mode = 1)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayCenter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Center a multi-way array — multiwayCenter","text":"cube Multi-way array mode Mode center across: 1=subjects,2=features,3=time (default 1).","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayCenter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Center a multi-way array — multiwayCenter","text":"Centered multi-way array","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayCenter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Center a multi-way array — multiwayCenter","text":"","code":"cube_cnt = multiwayCenter(Fujita2023$data)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayScale.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale a multi-way array — multiwayScale","title":"Scale a multi-way array — multiwayScale","text":"Note: function exists multiway::nscale() handle NAs.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayScale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale a multi-way array — multiwayScale","text":"","code":"multiwayScale(cube, mode = 2)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayScale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale a multi-way array — multiwayScale","text":"cube Multi-way array mode Mode scale within: 1=subjects,2=features,3=time (default 2).","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayScale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale a multi-way array — multiwayScale","text":"Scaled multi-way array","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/multiwayScale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale a multi-way array — multiwayScale","text":"","code":"cube_scl = multiwayCenter(Fujita2023$data)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel Factor Analysis-1 — parafac","title":"Parallel Factor Analysis-1 — parafac","text":"Fits Richard . Harshman's Parallel Factors (Parafac) model 3-way 4-way data arrays. Parameters estimated via alternating least squares optional constraints.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel Factor Analysis-1 — parafac","text":"","code":"parafac(   X,   nfac,   nstart = 10,   const = NULL,   control = NULL,   Afixed = NULL,   Bfixed = NULL,   Cfixed = NULL,   Dfixed = NULL,   Astart = NULL,   Bstart = NULL,   Cstart = NULL,   Dstart = NULL,   Astruc = NULL,   Bstruc = NULL,   Cstruc = NULL,   Dstruc = NULL,   Amodes = NULL,   Bmodes = NULL,   Cmodes = NULL,   Dmodes = NULL,   maxit = 500,   ctol = 1e-04,   parallel = FALSE,   cl = NULL,   output = c(\"best\", \"all\"),   verbose = TRUE,   backfit = FALSE )"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel Factor Analysis-1 — parafac","text":"X Three-way data array dim=c(,J,K) four-way data array dim=c(,J,K,L). Missing data allowed (see Note). nfac Number factors. nstart Number random starts. const Character vector length 3 4 giving constraints mode (defaults unconstrained). See CMLS::const 24 available options. control List parameters controlling options smoothness constraints. passed multiway::const.control, describes available options. Afixed Used fit model fixed Mode weights. Bfixed Used fit model fixed Mode B weights. Cfixed Used fit model fixed Mode C weights. Dfixed Used fit model fixed Mode D weights. Astart Starting Mode weights. Default uses random weights. Bstart Starting Mode B weights. Default uses random weights. Cstart Starting Mode C weights. Default uses random weights. Dstart Starting Mode D weights. Default uses random weights. Astruc Structure constraints Mode weights. See Note. Bstruc Structure constraints Mode B weights. See Note. Cstruc Structure constraints Mode C weights. See Note. Dstruc Structure constraints Mode D weights. See Note. Amodes Mode ranges Mode weights (unimodality constraints). See Note. Bmodes Mode ranges Mode B weights (unimodality constraints). See Note. Cmodes Mode ranges Mode C weights (unimodality constraints). See Note. Dmodes Mode ranges Mode D weights (unimodality constraints). See Note. maxit Maximum number iterations. ctol Convergence tolerance (R^2 change). parallel Logical indicating parallel::parLapply used. See Examples. cl Cluster created parallel::makeCluster. used parallel=TRUE. output Output best solution (default) output nstart solutions. verbose TRUE, fitting progress printed via utils::txtProgressBar. Ignored parallel=TRUE. backfit backfitting algorithm used CMLS::cmls?","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel Factor Analysis-1 — parafac","text":"output = \"best\", returns object class \"parafac\" following elements: #' Mode weight matrix. B Mode B weight matrix. C Mode C weight matrix. D Mode D weight matrix. SSE Sum Squared Errors. Rsq R-squared value. GCV Generalized Cross-Validation. edf Effective degrees freedom. iter Number iterations. cflag Convergence flag. See Note. const See argument const. control See argument control. fixed Logical vector indicating whether 'fixed' weights used mode. struc Logical vector indicating whether 'struc' constraints used mode. Otherwise returns list length nstart element object class \"parafac\".","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Parallel Factor Analysis-1 — parafac","text":"Missing data specified NA values input X. missing data randomly initialized iteratively imputed part algorithm. Structure constraints specified matrix logicals (TRUE/FALSE), FALSE elements indicate weight constrained zero. Default uses unstructured weights, .e., matrix TRUE values. using unimodal constraints, *modes inputs can used specify mode search range factor. inputs matrices dimension c(2,nfac) first row gives minimum mode value second row gives maximum mode value (respect indicies corresponding weight matrix). Output cflag gives convergence information: cflag = 0 algorithm converged normally, cflag = 1 maximum iteration limit reached convergence, cflag = 2 algorithm terminated abnormally due problem constraints.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/parafac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parallel Factor Analysis-1 — parafac","text":"","code":"library(multiway) #' ##########   3-way example   ##########  # create random data array with Parafac structure set.seed(3) mydim <- c(50, 20, 5) nf <- 3 Amat <- matrix(rnorm(mydim[1]*nf), nrow = mydim[1], ncol = nf) Bmat <- matrix(runif(mydim[2]*nf), nrow = mydim[2], ncol = nf) Cmat <- matrix(runif(mydim[3]*nf), nrow = mydim[3], ncol = nf) Xmat <- tcrossprod(Amat, krprod(Cmat, Bmat)) Xmat <- array(Xmat, dim = mydim) Emat <- array(rnorm(prod(mydim)), dim = mydim) Emat <- nscale(Emat, 0, ssnew = sumsq(Xmat))   # SNR = 1 X <- Xmat + Emat  # fit Parafac model (unconstrained) pfac <- parafac(X, nfac = nf, nstart = 1) #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100% pfac #>  #> 3-way Parafac with 3 factors  #>  #> Constraints: #>       A      B      C #>  uncons uncons uncons #>  #> Fit Information: #>   SSE = 950.3324  #>   R^2 = 0.5149861  #>   GCV = 0.2078778  #>   EDF = 219  #>   #> Converged: TRUE (15 iterations) #>    # fit Parafac model (non-negativity on Modes B and C) pfacNN <- parafac(X, nfac = nf, nstart = 1,             const = c(\"uncons\", \"nonneg\", \"nonneg\")) #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100% pfacNN #>  #> 3-way Parafac with 3 factors  #>  #> Constraints: #>       A      B      C #>  uncons nonneg nonneg #>  #> Fit Information: #>   SSE = 950.1934  #>   R^2 = 0.515057  #>   GCV = 0.2078474  #>   EDF = 219  #>   #> Converged: TRUE (12 iterations) #>    # check solution Xhat <- fitted(pfac) sum((Xmat - Xhat)^2) / prod(mydim) #> [1] 0.008264583  # reorder and resign factors pfac$B[1:4,] #>            [,1]       [,2]       [,3] #> [1,] -0.2993941 -0.9361133 -0.3507422 #> [2,] -0.3731378 -0.3491355 -0.4316282 #> [3,] -1.4244651 -0.8101654 -1.0452068 #> [4,] -0.9485296 -0.8058645 -0.5985801 pfac <- reorder(pfac, c(3,1,2)) pfac$B[1:4,] #>            [,1]       [,2]       [,3] #> [1,] -0.3507422 -0.2993941 -0.9361133 #> [2,] -0.4316282 -0.3731378 -0.3491355 #> [3,] -1.0452068 -1.4244651 -0.8101654 #> [4,] -0.5985801 -0.9485296 -0.8058645 pfac <- resign(pfac, mode=\"B\") pfac$B[1:4,] #>           [,1]      [,2]      [,3] #> [1,] 0.3507422 0.2993941 0.9361133 #> [2,] 0.4316282 0.3731378 0.3491355 #> [3,] 1.0452068 1.4244651 0.8101654 #> [4,] 0.5985801 0.9485296 0.8058645 Xhat <- fitted(pfac) sum((Xmat - Xhat)^2) / prod(mydim) #> [1] 0.008264583  # rescale factors colSums(pfac$B^2) #> [1] 20 20 20 colSums(pfac$C^2) #> [1] 0.2374967 0.6032392 0.2727013 pfac <- rescale(pfac, mode = \"C\", absorb = \"B\") colSums(pfac$B^2) #> [1] 0.9499866 2.4129567 1.0908051 colSums(pfac$C^2) #> [1] 5 5 5 Xhat <- fitted(pfac) sum((Xmat - Xhat)^2) / prod(mydim) #> [1] 0.008264583   ##########   4-way example   ##########  # create random data array with Parafac structure set.seed(4) mydim <- c(30,10,8,10) nf <- 4 aseq <- seq(-3, 3, length.out = mydim[1]) Amat <- cbind(dnorm(aseq), dchisq(aseq+3.1, df=3),       dt(aseq-2, df=4), dgamma(aseq+3.1, shape=3, rate=1)) Bmat <- svd(matrix(runif(mydim[2]*nf), nrow = mydim[2], ncol = nf), nv = 0)$u Cmat <- matrix(runif(mydim[3]*nf), nrow = mydim[3], ncol = nf) Cstruc <- Cmat > 0.5 Cmat <- Cmat * Cstruc Dmat <- matrix(runif(mydim[4]*nf), nrow = mydim[4], ncol = nf) Xmat <- tcrossprod(Amat, krprod(Dmat, krprod(Cmat, Bmat))) Xmat <- array(Xmat, dim = mydim) Emat <- array(rnorm(prod(mydim)), dim = mydim) Emat <- nscale(Emat, 0, ssnew = sumsq(Xmat))   # SNR = 1 X <- Xmat + Emat  # fit Parafac model (unimodal and smooth A, orthogonal B, #                    non-negative and structured C, non-negative D) pfac <- parafac(X, nfac = nf, nstart = 1, Cstruc = Cstruc,             const = c(\"unismo\", \"orthog\", \"nonneg\", \"nonneg\")) #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100% pfac #>  #> 4-way Parafac with 4 factors  #>  #> Constraints: #>       A      B             C      D #>  unismo orthog nonneg+struct nonneg #>  #> Fit Information: #>   SSE = 42.48407  #>   R^2 = 0.4873829  #>   GCV = 0.001785761  #>   EDF = 105  #>   #> Converged: TRUE (7 iterations) #>    # check solution Xhat <- fitted(pfac) sum((Xmat - Xhat)^2) / prod(mydim) #> [1] 5.132859e-05 congru(Amat, pfac$A) #>           [,1]      [,2]      [,3]       [,4] #> [1,] 0.9996716 0.7287234 0.4135958 -0.8044008 #> [2,] 0.7123512 0.9990610 0.3778488 -0.9789737 #> [3,] 0.4145023 0.3786920 0.9986611 -0.4571581 #> [4,] 0.8712777 0.9374104 0.4200941 -0.9332070 crossprod(pfac$B) #>               [,1]         [,2]          [,3]          [,4] #> [1,]  1.000000e+01 3.345089e-15  9.014050e-16 -1.413387e-15 #> [2,]  3.345089e-15 1.000000e+01  1.207936e-15  2.749057e-15 #> [3,]  9.014050e-16 1.207936e-15  1.000000e+01 -4.394494e-16 #> [4,] -1.413387e-15 2.749057e-15 -4.394494e-16  1.000000e+01 pfac$C #>              [,1]      [,2]          [,3]      [,4] #> [1,] 1.429197e+00 1.0865265 -1.062753e-19 0.0000000 #> [2,] 7.471576e-19 0.8404925  6.669612e-36 1.2003143 #> [3,] 8.760174e-01 0.0000000  1.477234e+00 0.0000000 #> [4,] 0.000000e+00 1.1272930  1.090825e+00 0.8922219 #> [5,] 1.342355e+00 1.3602890  9.173661e-01 1.3893746 #> [6,] 1.709773e-19 1.1615836  0.000000e+00 1.6053098 #> [7,] 1.289349e+00 1.2816319  1.307693e+00 0.0000000 #> [8,] 1.313641e+00 0.0000000  1.440923e+00 1.1206267 Cstruc #>       [,1]  [,2]  [,3]  [,4] #> [1,]  TRUE  TRUE FALSE FALSE #> [2,] FALSE  TRUE FALSE  TRUE #> [3,]  TRUE FALSE  TRUE FALSE #> [4,] FALSE  TRUE  TRUE  TRUE #> [5,]  TRUE  TRUE  TRUE  TRUE #> [6,] FALSE  TRUE FALSE  TRUE #> [7,]  TRUE  TRUE  TRUE FALSE #> [8,]  TRUE FALSE  TRUE  TRUE"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotPARAFACmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a PARAFAC model — plotPARAFACmodel","title":"Plot a PARAFAC model — plotPARAFACmodel","text":"Plot PARAFAC model","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotPARAFACmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a PARAFAC model — plotPARAFACmodel","text":"","code":"plotPARAFACmodel(   model,   dataset,   colourCols = NULL,   legendTitles = NULL,   xLabels = NULL,   legendColNums = NULL,   arrangeModes = NULL,   continuousModes = NULL,   overallTitle = \"\" )"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotPARAFACmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a PARAFAC model — plotPARAFACmodel","text":"model Model output parafac(). dataset longitudinal microbiome dataset, ideally processed processDataCube(), formatted follows: data Array object data cube mode1 Dataframe subject metadata, ordered rows data cube. mode2 Taxonomic classification microbiota, ordered columns data cube. mode3 Dataframe time metadata, ordered third dimension array. colourCols Vector strings stating column names factorized colours per mode. legendTitles Vector strings stating legend title per mode. xLabels Vector strings stating x-axis labels per mode. legendColNums Vector integers stating desired number columns legends per mode. arrangeModes Vector boolean values per mode, stating loadings arranged according colourCols (TRUE) (FALSE). continuousModes Vector boolean values per mode, stating loadings plotted line plot (TRUE) bar plot (FALSE). overallTitle Overall title plot.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotPARAFACmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a PARAFAC model — plotPARAFACmodel","text":"Plot object","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/plotPARAFACmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a PARAFAC model — plotPARAFACmodel","text":"","code":"library(multiway) library(dplyr) library(ggplot2) set.seed(0)  # Make PARAFAC model processedFujita = processDataCube(Fujita2023, sparsityThreshold=0.99, centerMode=1, scaleMode=2) model = parafac(processedFujita$data, nfac=3, nstart=100, verbose=FALSE)  # Make plot plotPARAFACmodel(model, processedFujita,   colourCols = c(\"\", \"Genus\", \"\"),   legendTitles = c(\"\", \"Genus\", \"\"),   xLabels = c(\"Replicate\", \"Feature index\", \"Time point\"),   legendColNums = c(0,5,0),   arrangeModes = c(FALSE, TRUE, FALSE),   continuousModes = c(FALSE,FALSE,TRUE),   overallTitle = \"Fujita PARAFAC model\")"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/processDataCube.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a multi-way array of count data. — processDataCube","title":"Process a multi-way array of count data. — processDataCube","text":"Process multi-way array count data.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/processDataCube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a multi-way array of count data. — processDataCube","text":"","code":"processDataCube(   dataset,   sparsityThreshold = 1,   considerGroups = FALSE,   groupVariable = \"\",   CLR = TRUE,   centerMode = 0,   scaleMode = 0 )"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/processDataCube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a multi-way array of count data. — processDataCube","text":"dataset longitudinal microbiome dataset, formatted follows: data Array object data cube filled counts mode1 Dataframe subject metadata, ordered rows data cube. mode2 Taxonomic classification microbiota, ordered columns data cube. mode3 Dataframe time metadata, ordered third dimension array. See Fujita2023, Shao2019 vanderPloeg2024 information. sparsityThreshold Maximum sparsity feature selected (default=1, .e. select features). considerGroups Consider groups calculating sparsity (default=FALSE). groupVariable Column name dataset$mode1 used consider groups (default=\"\"). CLR Perform centered log-ratio transformation count data (default=TRUE). centerMode Mode center across: 1=subjects,2=features,3=time (default 0, .e. center). See multiwayCenter() information. scaleMode Mode scale within: 1=subjects,2=features,3=time (default 0, .e. scale). See multiwayScale() information.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/processDataCube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a multi-way array of count data. — processDataCube","text":"CLRed, centered scaled cube","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/processDataCube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process a multi-way array of count data. — processDataCube","text":"","code":"processedCube = processDataCube(Fujita2023)"},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/vanderPloeg2024.html","id":null,"dir":"Reference","previous_headings":"","what":"vanderPloeg2024 longitudinal microbiome data — vanderPloeg2024","title":"vanderPloeg2024 longitudinal microbiome data — vanderPloeg2024","text":"vanderPloeg2024 longitudinal microbiome dataset three-dimensional array, subjects mode 1, microbial abundances mode 2, time mode 3. Note: -zero microbial abundances removed save disk space.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/vanderPloeg2024.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vanderPloeg2024 longitudinal microbiome data — vanderPloeg2024","text":"","code":"vanderPloeg2024"},{"path":[]},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/vanderPloeg2024.html","id":"vanderploeg-","dir":"Reference","previous_headings":"","what":"vanderPloeg2024","title":"vanderPloeg2024 longitudinal microbiome data — vanderPloeg2024","text":"list object three elements: data Array object data cube mode1 Dataframe subject metadata, ordered rows data cube. mode2 Taxonomic classification microbiota, ordered columns data cube. mode3 Dataframe time metadata, ordered third dimension array.","code":""},{"path":"https://grvanderploeg.github.io/parafac4microbiome/reference/vanderPloeg2024.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"vanderPloeg2024 longitudinal microbiome data — vanderPloeg2024","text":"https://doi.org/10.1186/s40168-023-01474-5","code":""}]
